import{_ as p,c as t,o as e,a,b as s,d as n}from"./app.f2ba6d58.js";const S='{"title":"\u641C\u7D22","description":"","frontmatter":{"title":"\u641C\u7D22"},"headers":[{"level":2,"title":"DFS","slug":"dfs"},{"level":3,"title":"\u9636\u4E58","slug":"\u9636\u4E58"},{"level":3,"title":"\u6590\u6CE2\u90A3\u5951","slug":"\u6590\u6CE2\u90A3\u5951"},{"level":3,"title":"\u4E8C\u53C9\u6811\u904D\u5386","slug":"\u4E8C\u53C9\u6811\u904D\u5386"},{"level":3,"title":"\u5168\u6392\u5E8F\u7684\u679A\u4E3E","slug":"\u5168\u6392\u5E8F\u7684\u679A\u4E3E"},{"level":3,"title":"\u7EC4\u5408\u7684\u679A\u4E3E","slug":"\u7EC4\u5408\u7684\u679A\u4E3E"},{"level":3,"title":"\u56DE\u6EAF","slug":"\u56DE\u6EAF"},{"level":3,"title":"\u526A\u679D","slug":"\u526A\u679D"},{"level":3,"title":"\u516B\u7687\u540E","slug":"\u516B\u7687\u540E"},{"level":3,"title":"\u6570\u72EC\u6C42\u89E3","slug":"\u6570\u72EC\u6C42\u89E3"},{"level":2,"title":"BFS","slug":"bfs"},{"level":3,"title":"\u6700\u77ED\u8DEF","slug":"\u6700\u77ED\u8DEF"},{"level":3,"title":"\u62D3\u6251\u6392\u5E8F","slug":"\u62D3\u6251\u6392\u5E8F"}],"relativePath":"algorithm/04-\u641C\u7D22.md","lastUpdated":1657092066000}',l={},o=a('<h1 id="\u641C\u7D22" tabindex="-1">\u641C\u7D22 <a class="header-anchor" href="#\u641C\u7D22" aria-hidden="true">#</a></h1><h2 id="dfs" tabindex="-1">DFS <a class="header-anchor" href="#dfs" aria-hidden="true">#</a></h2><h3 id="\u9636\u4E58" tabindex="-1">\u9636\u4E58 <a class="header-anchor" href="#\u9636\u4E58" aria-hidden="true">#</a></h3><h3 id="\u6590\u6CE2\u90A3\u5951" tabindex="-1">\u6590\u6CE2\u90A3\u5951 <a class="header-anchor" href="#\u6590\u6CE2\u90A3\u5951" aria-hidden="true">#</a></h3><h3 id="\u4E8C\u53C9\u6811\u904D\u5386" tabindex="-1">\u4E8C\u53C9\u6811\u904D\u5386 <a class="header-anchor" href="#\u4E8C\u53C9\u6811\u904D\u5386" aria-hidden="true">#</a></h3><h3 id="\u5168\u6392\u5E8F\u7684\u679A\u4E3E" tabindex="-1">\u5168\u6392\u5E8F\u7684\u679A\u4E3E <a class="header-anchor" href="#\u5168\u6392\u5E8F\u7684\u679A\u4E3E" aria-hidden="true">#</a></h3><h3 id="\u7EC4\u5408\u7684\u679A\u4E3E" tabindex="-1">\u7EC4\u5408\u7684\u679A\u4E3E <a class="header-anchor" href="#\u7EC4\u5408\u7684\u679A\u4E3E" aria-hidden="true">#</a></h3><h3 id="\u56DE\u6EAF" tabindex="-1">\u56DE\u6EAF <a class="header-anchor" href="#\u56DE\u6EAF" aria-hidden="true">#</a></h3><h3 id="\u526A\u679D" tabindex="-1">\u526A\u679D <a class="header-anchor" href="#\u526A\u679D" aria-hidden="true">#</a></h3><h3 id="\u516B\u7687\u540E" tabindex="-1">\u516B\u7687\u540E <a class="header-anchor" href="#\u516B\u7687\u540E" aria-hidden="true">#</a></h3><h3 id="\u6570\u72EC\u6C42\u89E3" tabindex="-1">\u6570\u72EC\u6C42\u89E3 <a class="header-anchor" href="#\u6570\u72EC\u6C42\u89E3" aria-hidden="true">#</a></h3><h2 id="bfs" tabindex="-1">BFS <a class="header-anchor" href="#bfs" aria-hidden="true">#</a></h2><h3 id="\u6700\u77ED\u8DEF" tabindex="-1">\u6700\u77ED\u8DEF <a class="header-anchor" href="#\u6700\u77ED\u8DEF" aria-hidden="true">#</a></h3><h4 id="dijkstra" tabindex="-1">Dijkstra <a class="header-anchor" href="#dijkstra" aria-hidden="true">#</a></h4><p>\u4F9D\u6B21\u9009\u53D6<strong>\u79BB\u51FA\u53D1\u70B9\u8DDD\u79BB\u6700\u8FD1\u7684\u70B9</strong>\u53BB\u66F4\u65B0\u5176\u4ED6\u70B9\u5230\u51FA\u53D1\u70B9\u7684\u8DDD\u79BB\uFF0C\u5C06\u9009\u8FC7\u7684\u70B9\u52A0\u5165\u96C6\u5408\uFF0C\u5F53\u5168\u90E8\u70B9\u52A0\u5165\u96C6\u5408\u540E\uFF0C\u5373\u53EF\u7ED3\u675F\uFF0C\u6B64\u65F6\u5404\u4E2A\u70B9\u5230\u51FA\u53D1\u70B9\u7684\u8DDD\u79BB\u5C31\u662F\u6700\u77ED\u8DDD\u79BB\uFF0C\u5404\u4E2A\u70B9\u52A0\u5165\u96C6\u5408\u7684\u987A\u5E8F\u5C31\u662F\u6700\u77ED\u8DDD\u79BB\u7684\u51FA\u53D1\u987A\u5E8F\u3002</p>',15),c=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"\u7B80\u5355\u8BC1\u660E"),s("p",null,"\u6BCF\u4E00\u6B21\u9009\u5165\u96C6\u5408\u7684\u70B9\u90FD\u662F\u4E0A\u4E2A\u70B9\uFF08\u8D77\u70B9\u5230\u8FD9\u70B9\u7684\u8DEF\u5F84\u6700\u77ED\uFF09\u5230\u5B83\u80FD\u5230\u7684\u70B9\u4E2D\u7684\u6700\u5C0F\u8DDD\u79BB\u70B9\uFF0C\u56E0\u6B64\u8D77\u70B9\u5230\u8FD9\u70B9\u7684\u8DEF\u5F84\u4E5F\u662F\u6700\u77ED\u7684\u3002"),s("p",null,[n("\u5373\uFF1A"),s("br"),n(" A \u70B9\u5230 B \u70B9\u662F A \u70B9\u80FD\u5230\u8FBE\u7684\u70B9\u4E2D\uFF0C\u8DDD\u79BB\u6700\u5C0F\u7684")]),s("p",null,"\u800C O \u70B9\uFF08\u8D77\u70B9\uFF09\u5230 A \u70B9\u5DF2\u7ECF\u662F\u6240\u6709\u8DEF\u5F84\u4E2D\u6700\u5C0F\u7684\uFF0C\u56E0\u6B64 \u4ECE O \u70B9\u5230 A \u70B9\u518D\u5230 B \u70B9\u5C31\u662F O \u70B9\u5230 B \u70B9\u6240\u6709\u8DEF\u5F84\u4E2D\u6700\u5C0F\u7684"),s("p",null,[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"P"),s("mrow",null,[s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"n")])]),s("mo",null,"("),s("msub",null,[s("mi",null,"V"),s("mi",null,"o")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"V"),s("mi",null,"b")]),s("mo",null,")"),s("mo",null,"="),s("msub",null,[s("mi",null,"P"),s("mrow",null,[s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"n")])]),s("mo",null,"("),s("msub",null,[s("mi",null,"V"),s("mi",null,"o")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"V"),s("mi",null,"a")]),s("mo",null,")"),s("mo",null,"+"),s("msub",null,[s("mi",null,"P"),s("mrow",null,[s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"n")])]),s("mo",null,"("),s("msub",null,[s("mi",null,"V"),s("mi",null,"a")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"V"),s("mi",null,"b")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"P_{min}(V_o,V_b) = P_{min}(V_o,V_a) + P_{min}(V_a,V_b) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base displaystyle textstyle uncramped"},[s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.13889em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathit"},"m"),s("span",{class:"mord mathit"},"i"),s("span",{class:"mord mathit"},"n")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"o")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"b")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")"),s("span",{class:"mrel"},"="),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.13889em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathit"},"m"),s("span",{class:"mord mathit"},"i"),s("span",{class:"mord mathit"},"n")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"o")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"a")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")"),s("span",{class:"mbin"},"+"),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.13889em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathit"},"m"),s("span",{class:"mord mathit"},"i"),s("span",{class:"mord mathit"},"n")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"a")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"b")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")")])])])])]),s("p",null,[n("( "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"P"),s("mrow",null,[s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"n")])]),s("mo",null,"("),s("msub",null,[s("mi",null,"V"),s("mi",null,"x")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"V"),s("mi",null,"y")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"P_{min}(V_x,V_y)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1.036108em","vertical-align":"-0.286108em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.13889em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathit"},"m"),s("span",{class:"mord mathit"},"i"),s("span",{class:"mord mathit"},"n")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"x")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.03588em"}},"y")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")")])])]),n("\u8868\u793A x \u70B9\u5230 y \u70B9\u7684\u6700\u5C0F\u8DDD\u79BB\u3002 )")]),s("p",null,[n("\u8FD9\u91CC\u56E0\u4E3A B \u70B9\u662F A \u70B9\u80FD\u5230\u8FBE\u70B9\u4E2D\u8DDD\u79BB\u6700\u5C0F\u70B9\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5F97\u5230"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"P"),s("mrow",null,[s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"n")])]),s("mo",null,"("),s("msub",null,[s("mi",null,"V"),s("mi",null,"A")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"V"),s("mi",null,"B")]),s("mo",null,")"),s("mo",null,"="),s("mi",null,"W"),s("mo",null,"("),s("msub",null,[s("mi",null,"V"),s("mi",null,"A")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"V"),s("mi",null,"B")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"P_{min}(V_A,V_B) = W(V_A,V_B)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.13889em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathit"},"m"),s("span",{class:"mord mathit"},"i"),s("span",{class:"mord mathit"},"n")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"A")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.05017em"}},"B")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")"),s("span",{class:"mrel"},"="),s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"W"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"A")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.05017em"}},"B")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")")])])])]),s("p",null,"\u5219\uFF1A"),s("p",null,[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"P"),s("mrow",null,[s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"n")])]),s("mo",null,"("),s("msub",null,[s("mi",null,"V"),s("mi",null,"o")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"V"),s("mi",null,"b")]),s("mo",null,")"),s("mo",null,"="),s("msub",null,[s("mi",null,"P"),s("mrow",null,[s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"n")])]),s("mo",null,"("),s("msub",null,[s("mi",null,"V"),s("mi",null,"o")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"V"),s("mi",null,"a")]),s("mo",null,")"),s("mo",null,"+"),s("mi",null,"W"),s("mo",null,"("),s("msub",null,[s("mi",null,"V"),s("mi",null,"a")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"V"),s("mi",null,"b")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"P_{min}(V_o,V_b) = P_{min}(V_o,V_a) + W(V_a,V_b) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base displaystyle textstyle uncramped"},[s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.13889em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathit"},"m"),s("span",{class:"mord mathit"},"i"),s("span",{class:"mord mathit"},"n")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"o")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"b")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")"),s("span",{class:"mrel"},"="),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.13889em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathit"},"m"),s("span",{class:"mord mathit"},"i"),s("span",{class:"mord mathit"},"n")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"o")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"a")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")"),s("span",{class:"mbin"},"+"),s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"W"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"a")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.22222em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"b")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")")])])])])])],-1),i=s("p",null,[n("\u56E0\u4E3A\u6BCF\u6B21\u9009\u53D6\u6700\u5C0F\u8DDD\u79BB\u90FD\u9700\u8981\u904D\u5386\u4E00\u904D\u672A\u52A0\u5165\u96C6\u5408\u7684\u70B9\u8DDD\u79BB\uFF0C\u6734\u7D20\u7248\u7684 dijkstra \u7684\u901F\u5EA6\u88AB\u9650\u5236\u5230"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.8141079999999999em"}}),s("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"n"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord mathrm"},"2")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")")])])])],-1),u=s("blockquote",null,[s("p",null,"\u6CE8\u610F\uFF1A"),s("ul",null,[s("li",null,"dijkstra \u7B97\u6CD5\u4E0D\u80FD\u5728\u8FB9\u6743\u4E3A\u8D1F\u6570\u7684\u60C5\u51B5\u4E0B\u4F7F\u7528"),s("li",null,"dijkstra \u7B97\u6CD5\u4EC5\u80FD\u5F97\u5230\u521D\u59CB\u70B9\u5230\u5404\u70B9\u7684\u6700\u5C0F\u8DDD\u79BB")])],-1),r=s("p",null,"\u6B65\u9AA4\uFF1A",-1),k=s("ol",null,[s("li",null,"updata\uFF08\u66F4\u65B0\u5404\u70B9\u5230\u521D\u59CB\u70B9\u7684\u8DDD\u79BB\uFF09"),s("li",null,"scan\uFF08\u627E\u51FA\u96C6\u5408\u5916\u8DDD\u79BB\u521D\u59CB\u70B9\u6700\u8FD1\u7684\u70B9\uFF09\uFF08\u53EF\u4F18\u5316\uFF09"),s("li",null,"add\uFF08\u5C06\u8BE5\u70B9\u52A0\u5165\u96C6\u5408\uFF09")],-1),m=s("p",null,"\u590D\u6742\u5EA6\uFF1A",-1),b=s("ul",null,[s("li",null,[n("\u65F6\u95F4\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.8141079999999999em"}}),s("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"n"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord mathrm"},"2")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")")])])])]),s("li",null,[n("\u7A7A\u95F4\uFF1A "),s("ul",null,[s("li",null,[n("\u7A00\u758F\u56FE\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("mi",null,"n"),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathit"},"n"),s("span",{class:"mclose"},")")])])])]),s("li",null,[n("\u7A20\u5BC6\u56FE\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.8141079999999999em"}}),s("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"n"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord mathrm"},"2")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")")])])])])])])],-1),d=a(`<div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span> <span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u521D\u59CB\u5316\u8DDD\u79BB\u4E3A\u65E0\u7A77</span>
    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//n \u6B21\u5FAA\u73AF\uFF0C\u6BCF\u6B21\u5C06\u4E00\u4E2A\u70B9\u52A0\u5165\u96C6\u5408</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                t <span class="token operator">=</span> j<span class="token punctuation">;</span>  <span class="token comment">//\u9009\u51FA\u672A\u52A0\u5165\u96C6\u5408\u4E2D\u6700\u8FD1\u7684\u70B9</span>

        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//\u52A0\u5165\u96C6\u5408</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//\u7528\u8BE5\u70B9\u66F4\u65B0\u5176\u4ED6\u672A\u52A0\u5165\u96C6\u5408\u4E2D\u7684\u70B9\u8DDD\u79BB</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">//\u56E0\u4E3A\u6700\u77ED\u7684\u8DDD\u79BB\u4F1A\u5148\u88AB\u9009\u53D6\uFF0C\u56E0\u6B64\uFF0C\u9009\u53D6\u8FC7\u7684\u70B9\u65E0\u9700\u88AB\u66F4\u65B0\u3002</span>
            dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//\u82E5\u65E0\u6CD5\u5230\u8FBE\u67D0\u70B9\uFF0C\u8DDD\u79BB\u4E3A\u65E0\u7A77</span>
    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>
        g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><blockquote><p>\u53EF\u4EE5\u7528\u53E6\u4E2A\u6570\u7EC4\u8BB0\u5F55\u5C06\u70B9\u52A0\u5165\u96C6\u5408\u7684\u987A\u5E8F\uFF08\u5373\u5230\u8FBE\u5F53\u524D\u70B9\u7684\u524D\u4E00\u4E2A\u70B9\uFF09\uFF0C\u53EF\u4EE5\u9012\u63A8\u51FA\u521D\u59CB\u70B9\u8D70\u5230\u67D0\u70B9\u7684\u8DEF\u5F84</p></blockquote><br><h4 id="dijkstra-heap" tabindex="-1">Dijkstra + Heap <a class="header-anchor" href="#dijkstra-heap" aria-hidden="true">#</a></h4><p>\u4F7F\u7528\u5806\u4F18\u5316 dijkstra scan \u6B65\u9AA4</p><p>\u590D\u6742\u5EA6\uFF1A</p>`,6),h=s("ul",null,[s("li",null,[n("\u65F6\u95F4\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("mi",null,"m"),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"n"),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(mlogn)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathit"},"m"),s("span",{class:"mord mathit",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathit"},"o"),s("span",{class:"mord mathit",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathit"},"n"),s("span",{class:"mclose"},")")])])])]),s("li",null,[n("\u7A7A\u95F4\uFF1A "),s("ul",null,[s("li",null,[n("\u7A00\u758F\u56FE\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("mi",null,"n"),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathit"},"n"),s("span",{class:"mclose"},")")])])])]),s("li",null,[n("\u7A20\u5BC6\u56FE\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.8141079999999999em"}}),s("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"n"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord mathrm"},"2")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")")])])])])])])],-1),y=a(`<div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000010</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span>
<span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    priority_queue<span class="token operator">&lt;</span>PII<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>PII<span class="token operator">&gt;&gt;</span> heap<span class="token punctuation">;</span>  <span class="token comment">//\u5927\u6839\u5806\uFF0C\u6CA1\u6B21\u53D6\u51FA\u6700\u5C0F\u7684\u8DDD\u79BB</span>
    heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">auto</span> t <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> ver <span class="token operator">=</span> t<span class="token punctuation">.</span>second<span class="token punctuation">,</span> distance <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">//\u82E5\u8BE5\u70B9\u5DF2\u7ECF\u52A0\u5165\u8FC7\u96C6\u5408\uFF0C\u7EE7\u7EED\u5224\u65AD\u4E0B\u4E00\u4E2A</span>
        st<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//\u672A\u52A0\u5165\u8FC7\u96C6\u5408\uFF0C\u52A0\u5165\u96C6\u5408</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u6210\u529F\u66F4\u65B0\u70B9\u540E\uFF0C\u5168\u90E8\u52A0\u5165\u5806\u4E2D\u6392\u5E8F\uFF0C\u5F85\u9009\u53D6\u52A0\u5165\u96C6\u5408</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//\u82E5\u65E0\u6CD5\u5230\u8FBE\u67D0\u70B9\uFF0C\u8DDD\u79BB\u4E3A\u65E0\u7A77</span>

    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><br><h4 id="bellman-ford" tabindex="-1">Bellman-Ford <a class="header-anchor" href="#bellman-ford" aria-hidden="true">#</a></h4><p><code>bellman_ford</code> \u53EA\u9700\u8981\u5C06\u6BCF\u6761\u8FB9\u5B58\u4E0B\u6765\uFF0C\u800C\u4E0D\u9700\u8981\u7528\u590D\u6742\u7684\u6570\u636E\u7ED3\u6784\u5B58\u56FE\uFF0C<code>bellman_ford</code> \u7B97\u6CD5\u9002\u5408\u7528\u6765\u89E3\u51B3\u6709\u8FB9\u6570\u9650\u5236\u7684\u6700\u77ED\u8DEF\u5F84\u95EE\u9898\uFF0C\u82E5\u9650\u5236\u4E3A k\uFF0C\u5373\u53EA\u80FD\u5FAA\u73AF k \u6B21\uFF0C\u6BCF\u6B21\u5FAA\u73AF\u5C06\u6BCF\u6761\u8FB9\u8FDB\u884C\u4E00\u6B21\u677E\u5F1B\u64CD\u4F5C\uFF0C\u4E00\u6B21\u677E\u5F1B\u64CD\u4F5C\u53EF\u4EE5\u7406\u89E3\u4E3A\u53EA\u8D70\u4E00\u6761\u8FB9\u5230\u67D0\u4E2A\u70B9\u800C\u4E0D\u7ECF\u8FC7\u5176\u4ED6\u70B9\uFF0C\u5C06\u80FD\u8D70\u5230\u7684\u70B9\u7684\u8FB9\u6743\u66F4\u65B0\uFF0C\u4E0B\u4E00\u6B21\u677E\u5F1B\u662F\u53EF\u4EE5\u5728\u7EE7\u627F\u4E0A\u6B21\u6700\u5C0F\u8D70\u5230\u7684\u70B9\u518D\u8D70\u4E00\u6761\u8FB9\uFF08\u8BB2\u4EBA\u8BDD\uFF0C\u5C31\u662F\u50CF bfs \u4E00\u6837\uFF0C\u677E\u5F1B\u4E00\u6B21\u5C31\u5411\u5916\u6269\u5C55\u4E00\u5708\uFF0C\u6BCF\u6B21\u677E\u5F1B\u53EF\u4EE5\u57FA\u4E8E\u4E0A\u4E00\u6B21\u8D70\u5230\u6700\u8FDC\u7684\u70B9\u518D\u8D70\uFF09</p><p>\u6B65\u9AA4\uFF1A</p><ol><li>k \u6B21\u5FAA\u73AF</li><li>\u6BCF\u6B21\u5FAA\u73AF\u66F4\u65B0\u6240\u6709\u7684\u8FB9</li></ol><p>\u590D\u6742\u5EA6\uFF1A</p>`,7),g=s("ul",null,[s("li",null,[n("\u65F6\u95F4\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("mi",null,"n"),s("mi",null,"m"),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(nm)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathit"},"n"),s("span",{class:"mord mathit"},"m"),s("span",{class:"mclose"},")")])])])]),s("li",null,[n("\u7A7A\u95F4\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("mi",null,"n"),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathit"},"n"),s("span",{class:"mclose"},")")])])])])],-1),f=a(`<div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">1e4</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> bk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Edge</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
<span class="token punctuation">}</span>edge<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">bellman_ford</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>bk<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> bk<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u7528\u4E0A\u6B21\u7684\u8FB9\u66F4\u65B0\uFF0C\u80FD\u9632\u6B62\u67D0\u70B9\u5DF2\u7ECF\u88AB\u66F4\u65B0\u540E\uFF0C\u53C8\u62FF\u53BB\u66F4\u65B0\u5176\u4ED6\u70B9\uFF0C\u5373\u80FD\u4FDD\u8BC1\u6BCF\u6B21\u53EA\u8D70\u4E00\u6761\u8FB9</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">auto</span> e <span class="token operator">=</span> edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            dist<span class="token punctuation">[</span>e<span class="token punctuation">.</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>e<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> bk<span class="token punctuation">[</span>e<span class="token punctuation">.</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">bellman_ford</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0x3f3f3f3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;impossible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u6709\u8D1F\u8FB9\u6743\uFF0C\u66F4\u65B0\u65F6\u53EF\u80FD\u51CF\u6389\u4E86\u4E00\u90E8\u5206</span>
    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><br><h4 id="spfa" tabindex="-1">Spfa <a class="header-anchor" href="#spfa" aria-hidden="true">#</a></h4><p>spfa \u662F bellman-ford \u7684\u4F18\u5316\uFF0C\u5728 bellman-ford \u4E2D\u6BCF\u6B21\u5FAA\u73AF\u90FD\u8981\u66F4\u65B0 m \u6761\u8FB9\uFF0C\u4E8B\u5B9E\u4E0A\u4E0D\u9700\u8981\u6BCF\u6761\u8FB9\u90FD\u66F4\u65B0\u3002\u82E5\u8981\u5230\u8FBE b \u70B9\uFF0C\u4E14\u9014\u4E2D\u7ECF\u8FC7 a \u70B9\uFF0C\u5219\u8981\u7528 a \u70B9\u6765\u66F4\u65B0 b\uFF0C\u5F53\u4E14\u4EC5\u5F53 a \u70B9\u88AB\u66F4\u65B0\u8FC7\u540E\uFF0C\u624D\u9700\u8981\u66F4\u65B0 b \u70B9(<code>dist[b] = last[a] + g[a][b]</code>)\uFF0C\u56E0\u6B64\u53EF\u4EE5\u4F7F\u7528\u4E00\u4E2A\u961F\u5217\u6765\u4FDD\u5B58\u66F4\u65B0\u8FC7\u7684\u70B9\uFF0C\u4EC5\u5F53\u8FD9\u4E9B\u70B9\u88AB\u66F4\u65B0\u8FC7\uFF0C\u624D\u62FF\u4ED6\u4EEC\u53BB\u66F4\u65B0\u5176\u4ED6\u70B9\uFF0C\u6B64\u65F6\u9700\u8981\u4F7F\u7528 st \u6570\u7EC4\u8BB0\u5F55\u66F4\u65B0\u8FC7\u7684\u70B9\uFF0C\u9632\u6B62\u91CD\u590D\u5197\u4F59\uFF08\u8FD9\u91CC\u7684 st \u548C dijkstra\uFF0Cprim \u4E2D\u7528\u4E8E\u8868\u793A\u96C6\u5408\u7684 st \u529F\u80FD\u4E0D\u540C\uFF09</p><blockquote><p>\u542B\u6709\u8D1F\u6743\u8FB9\u7684\u6700\u5C0F\u8DEF\u5F84\u95EE\u9898\uFF0C\u53EF\u4EE5\u4F18\u5148\u8003\u8651 Spfa \u7B97\u6CD5\uFF0C\u82E5\u53EA\u6709\u6B63\u6743\u8FB9\uFF0C\u4E14 spfa \u8FC7\u4E0D\u4E86\u518D\u8003\u8651 dijkstra</p></blockquote><p>\u6B65\u9AA4\uFF1A</p><ol><li>pop\uFF08\u628A\u961F\u5217\u4E2D\u7528\u4E8E\u66F4\u65B0\u7684\u8FB9\u53D6\u51FA\uFF09</li><li>updata\uFF08\u7528\u66F4\u65B0\u8FC7\u7684\u8FB9\u53BB\u66F4\u65B0\u5176\u4ED6\u8FB9\uFF09</li><li>add\uFF08\u628A\u65B0\u66F4\u65B0\u7684\u8FB9\u52A0\u5165\u961F\u5217\u5F85\u7528\u4E8E\u66F4\u65B0\u5176\u4ED6\u8FB9\uFF09</li></ol><p>\u590D\u6742\u5EA6\uFF1A</p>`,8),z=s("ul",null,[s("li",null,[n("\u65F6\u95F4\uFF1A\u6700\u4F18\u4E3A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("mi",null,"m"),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(m)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathit"},"m"),s("span",{class:"mclose"},")")])])]),n("\uFF0C\u6700\u574F\u4E3A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("mi",null,"n"),s("mi",null,"m"),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(nm)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathit"},"n"),s("span",{class:"mord mathit"},"m"),s("span",{class:"mclose"},")")])])])]),s("li",null,[n("\u7A7A\u95F4\uFF1A "),s("ul",null,[s("li",null,[n("\u7A00\u758F\u56FE\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("mi",null,"n"),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathit"},"n"),s("span",{class:"mclose"},")")])])])]),s("li",null,[n("\u7A20\u5BC6\u56FE\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.8141079999999999em"}}),s("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"n"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord mathrm"},"2")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")")])])])])])])],-1),w=a(`<div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span>
<span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>
    w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
    h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0x3f3f3f3f</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;impossible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div><br><h4 id="floyd" tabindex="-1">Floyd <a class="header-anchor" href="#floyd" aria-hidden="true">#</a></h4><p>floyd \u57FA\u4E8E dp \u60F3\u6CD5\uFF0C\u6C42\u4E24\u70B9\u95F4\u6700\u77ED\u8DDD\u79BB\uFF0C\u82E5\u4E24\u70B9\u95F4\u5B58\u5728\u5176\u4ED6\u70B9\uFF0C\u5219\u6C42\u8BE5\u70B9\u5230\u4E24\u7AEF\u70B9\u7684\u6700\u5C0F\u8DDD\u79BB\uFF0C\u82E5\u6709\u591A\u4E2A\u70B9\u5219\u53EF\u77E5\u9053\uFF0C\u53EA\u8981\u4F7F\u6BCF\u4E2A\u70B9\u95F4\u7684\u8DDD\u79BB\u6700\u5C0F\uFF0C\u5219\u4E24\u7AEF\u70B9\u7684\u8DDD\u79BB\u662F\u6700\u5C0F\u7684\u3002</p><blockquote><p>\u8DEF\u5F84\uFF1A\u53EF\u4EE5\u4F7F\u7528\u4E8C\u7EF4\u6570\u7EC4\u8BB0\u5F55<code>path[i][j]</code>\uFF0C\u5373\u6BCF\u6B21\u66F4\u65B0\u8DDD\u79BB\u90FD\u6709<code>path[i][j] = path[i][k]</code>, \u90A3\u4E48\u5C31\u53EF\u4EE5\u5F97\u5230\uFF0Ci \u5230 j \u7684\u8DEF\u5F84</p></blockquote><br><p>\u590D\u6742\u5EA6\uFF1A</p>`,7),x=s("ul",null,[s("li",null,[n("\u65F6\u95F4\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"3")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(n^3)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.8141079999999999em"}}),s("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"n"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord mathrm"},"3")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")")])])])]),s("li",null,[n("\u7A7A\u95F4\uFF1A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",null,"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.8141079999999999em"}}),s("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"n"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord mathrm"},"2")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"\u200B")]),n("\u200B")])])]),s("span",{class:"mclose"},")")])])])])],-1),_=a(`<div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e4</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> INF <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>
        d<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&gt;</span> INF <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;impossible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="\u62D3\u6251\u6392\u5E8F" tabindex="-1">\u62D3\u6251\u6392\u5E8F <a class="header-anchor" href="#\u62D3\u6251\u6392\u5E8F" aria-hidden="true">#</a></h3><p>\u62D3\u6251\u5E8F\u5217\u662F\u9488\u5BF9<mark>\u6709\u5411\u56FE</mark>\u7684\u6982\u5FF5\u3002<br> \u62D3\u6251\u6392\u5E8F\uFF0C\u662F\u5BF9\u4E00\u4E2A\u6709\u5411\u65E0\u73AF\u56FE G \u8FDB\u884C\u62D3\u6251\u6392\u5E8F\uFF0C\u5C06 G \u4E2D\u6240\u6709\u9876\u70B9\u6392\u6210\u4E00\u4E2A\u7EBF\u6027\u5E8F\u5217\uFF0C\u4F7F\u5F97\u56FE\u4E2D\u4EFB\u610F\u4E00\u5BF9\u9876\u70B9 u \u548C v\uFF0C\u82E5\u8FB9(u,v)\u2208E(G)\uFF0C\u5219 u \u5728\u7EBF\u6027\u5E8F\u5217\u4E2D\u51FA\u73B0\u5728 v \u4E4B\u524D\u3002\u901A\u5E38\uFF0C\u8FD9\u6837\u7684\u7EBF\u6027\u5E8F\u5217\u79F0\u4E3A\u6EE1\u8DB3\u62D3\u6251\u6B21\u5E8F\u7684\u5E8F\u5217\uFF0C\u7B80\u79F0\u62D3\u6251\u5E8F\u5217\u3002</p><p>\u7B80\u5355\u7684\u8BF4\uFF0C\u7531\u67D0\u4E2A\u96C6\u5408\u4E0A\u7684<mark>\u4E00\u4E2A\u504F\u5E8F\u5F97\u5230\u8BE5\u96C6\u5408\u4E0A\u7684\u4E00\u4E2A\u5168\u5E8F</mark>\uFF0C\u8FD9\u4E2A\u64CD\u4F5C\u79F0\u4E4B\u4E3A\u62D3\u6251\u6392\u5E8F\u3002<br> \u53EF\u4EE5\u8BC1\u660E\u6709\u5411\u65E0\u73AF\u56FE\u4E00\u5B9A\u5B58\u5728\u62D3\u6251\u5E8F\u5217\uFF0C\u56E0\u6B64\u6709\u5411\u65E0\u73AF\u56FE\u4E5F\u88AB\u79F0\u4E3A\u62D3\u6251\u56FE</p><p>\u6B65\u9AA4\uFF1A</p><ol><li>\u5728\u6709\u5411\u65E0\u73AF\u56FE\u4E2D\u5BFB\u627E\u6240\u6709\u5165\u5EA6\u4E3A 0 \u7684\u70B9\uFF08\u5373\u6CA1\u6709\u5176\u4ED6\u70B9\u53EF\u4EE5\u5728\u8BE5\u70B9\u524D\uFF09\uFF0C\u5165\u961F</li><li>\u679A\u4E3E\u8FD9\u4E9B\u70B9\u7684\u51FA\u8FB9\uFF0C\u5220\u6389\u8FD9\u6761\u8FB9\uFF0C\u5047\u5982\u961F\u5217\u4E2D\u7684\u70B9 A \u8FDE\u5411 B\uFF0C\u90A3\u4E48\u5220\u9664<code>A-&gt;B</code>\uFF0CB \u7684\u5165\u5EA6\u51CF\u4E00</li><li>\u82E5 B \u7684\u5165\u5EA6\u4E3A\u96F6\uFF0C\u5219\u5165\u961F<br></li></ol><p>\u5224\u65AD\uFF1A</p><p>\u5F53\u6240\u6709\u70B9\u90FD\u8FDB\u5165\u961F\u5217\uFF0C\u5219\u6392\u5E8F\u5B8C\u6210\uFF0C\u961F\u5217\u4E2D\u70B9\u7684\u987A\u5E8F\u5C31\u662F\u62D3\u6251\u5E8F\u5217\uFF0C\u82E5\u961F\u5217\u4E2D\u70B9\u6570\u5C11\u4E8E n\uFF0C\u5219\u8BF4\u660E\u56FE\u6709\u73AF\uFF0C\u65E0\u62D3\u6251\u5E8F\u5217\u3002</p><blockquote><p>\u53EF\u4EE5\u77E5\u9053\u5982\u679C\u56FE\u4E2D\u5B58\u5728\u73AF\u7684\u8BDD\uFF0C\u6CA1\u6709\u4E00\u4E2A\u70B9\u7684\u5165\u5EA6\u4E3A\u96F6\uFF0C\u56E0\u6B64\u6709\u73AF\u56FE\u65E0\u62D3\u6251\u5E8F\u5217<br> \u6709\u5411\u65E0\u73AF\u56FE\u4E00\u5B9A\u81F3\u5C11\u5B58\u5728\u4E00\u4E2A\u5165\u5EA6\u4E3A\u96F6\u7684\u70B9</p></blockquote><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span>
<span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">topSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span><span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">[</span>hh <span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                q<span class="token punctuation">[</span><span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tt <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>
        d<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">topSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div>`,10),v=[o,c,i,u,r,k,m,b,d,h,y,g,f,z,w,x,_];function V(j,O,N,P,q,T){return e(),t("div",null,v)}var I=p(l,[["render",V]]);export{S as __pageData,I as default};

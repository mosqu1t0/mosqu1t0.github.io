(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{299:function(t,a,s){"use strict";s.r(a);var e=s(10),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[t._v("#")]),t._v(" 事务")]),t._v(" "),a("p",[t._v("  事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么"),a("code",[t._v("同时成功，要么同时失败。")])]),t._v(" "),a("h2",{attrs:{id:"特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[t._v("#")]),t._v(" 特性")]),t._v(" "),a("ul",[a("li",[t._v("原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败")]),t._v(" "),a("li",[t._v("一致性：事务完成时，必须使所有的数据都保持一致状态")]),t._v(" "),a("li",[t._v("隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。")]),t._v(" "),a("li",[t._v("持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。")])]),t._v(" "),a("h2",{attrs:{id:"操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作"}},[t._v("#")]),t._v(" 操作")]),t._v(" "),a("ol",[a("li",[t._v("方式一")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("查看"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("设置事务提交方式 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 表示自动提交，"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" 表示手动提交\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@autocommit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@autocommit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n提交事务\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n回滚事务\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rollback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("方式二")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("开启事务\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n\n提交事务\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n回滚事务\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rollback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"并发事务问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发事务问题"}},[t._v("#")]),t._v(" 并发事务问题")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("问题")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("脏读")]),t._v(" "),a("td",[t._v("一个事务读到另外一个事务还没有提交的数据")])]),t._v(" "),a("tr",[a("td",[t._v("不可重复读")]),t._v(" "),a("td",[t._v("一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。")])]),t._v(" "),a("tr",[a("td",[t._v("幻读")]),t._v(" "),a("td",[t._v("一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了一个幻影")])])])]),t._v(" "),a("h2",{attrs:{id:"事务隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务隔离级别"}},[t._v("#")]),t._v(" 事务隔离级别")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("隔离级别")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("脏读")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("不可重复读")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("幻读")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Read uncommitted")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("🚫")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("🚫")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("🚫")])]),t._v(" "),a("tr",[a("td",[t._v("Read committed")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("🚫")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("🚫")])]),t._v(" "),a("tr",[a("td",[t._v("Repeatable Read(mysql默认)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("🚫")])]),t._v(" "),a("tr",[a("td",[t._v("Serializable")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✅")])])])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v(" 查看事务隔离级别\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@transaction_isolation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n 设置事务隔离级别\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("global")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" {"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),t._v(" uncommited "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("committed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Repeatable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("serializable")]),t._v("}\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("serializable 通过使所有事务串行来达到规避并发问题，即等待第一个操作同一字段的事件结束后才能操作下一个，性能因此下降")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Serialiazble 虽然安全性最高，但是性能最差。同理Read uncommitted 虽然安全性低，但是性能最高, 因此选择时需要合理地考虑需求")])])])}),[],!1,null,null,null);a.default=r.exports}}]);
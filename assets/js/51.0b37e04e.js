(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{318:function(t,s,a){"use strict";a.r(s);var e=a(10),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"httpservletrequest-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#httpservletrequest-对象"}},[t._v("#")]),t._v(" HttpServletRequest 对象")]),t._v(" "),s("p",[t._v("主要作用是获取Client 发送的各种信息\nHttpServletRequest 是 ServletRequest 的子接口, ServletRequest只有一个接口")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("getRequestURL()")]),t._v(" "),s("td",[t._v("获取 请求行完整URL")])]),t._v(" "),s("tr",[s("td",[t._v("getRequestURI()")]),t._v(" "),s("td",[t._v("获取 请求行部分URL(资源名称部分,从项目站点名开始，到？前结束)")])]),t._v(" "),s("tr",[s("td",[t._v("getRequestString()")]),t._v(" "),s("td",[t._v("获取 请求行中的参数部分 从？后开始")])]),t._v(" "),s("tr",[s("td",[t._v("getMethod()")]),t._v(" "),s("td",[t._v("获取 客户端请求的方式")])]),t._v(" "),s("tr",[s("td",[t._v("getProtocol()")]),t._v(" "),s("td",[t._v("获取 HTTP 版本号")])]),t._v(" "),s("tr",[s("td",[t._v("getContextPath()")]),t._v(" "),s("td",[t._v("获取Webapp 名字")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("以上为常规方法，返回值为Stringbuffer")])]),t._v(" "),s("br"),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("strong",[t._v("getParameter()")])]),t._v(" "),s("td",[t._v("获取指定名称的参数(重要)")])]),t._v(" "),s("tr",[s("td",[t._v("getParameterValue")]),t._v(" "),s("td",[t._v("获取指定名称的参数的所有值")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("以上为特殊方法，返回值为String，getParameterValue 返回字符串数组")])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"请求乱码问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求乱码问题"}},[t._v("#")]),t._v(" 请求乱码问题")]),t._v(" "),s("p",[t._v("由于request接受客户端的参数，所有其默认的语言编码，默认编码为 ISO-8859(此编码不支持中文) 所以会出现乱码，因此需要设置request 的编码，以支持中文。")]),t._v(" "),s("p",[t._v("两种方式:")]),t._v(" "),s("ol",[s("li",[t._v("设置request 中的编码方式，告诉服务器以何种方式解析数据")]),t._v(" "),s("li",[t._v("在接受数据后再通过相应的编码格式还原")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.")]),t._v("\nrequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCharacterEncoding")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTF-8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//只针对post有效")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2, 针对Tomcat7及以下GET请求的解决办法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" usrName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getParameter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"usrname"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ISO-8859-1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTF-8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("ol",[s("li",[t._v("Tomcat8 get 方法输入的中文不会乱码，post会。")]),t._v(" "),s("li",[t._v("Tomcat7 及以下 get 方法和 post 方法 都会乱码")]),t._v(" "),s("li",[t._v("亲测 Tomcat10 post输入中文也不会乱码")])])]),t._v(" "),s("h2",{attrs:{id:"请求转发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求转发"}},[t._v("#")]),t._v(" 请求转发")]),t._v(" "),s("p",[t._v("请求转发是一种服务器行为，当客户端请求到达后，服务器会进行转发，此时会将请求对象进行保存，"),s("strong",[t._v("地址栏中的URL不会改变")]),t._v("，得到响应后，服务端再将响应发送给客户端，"),s("strong",[t._v("从始至终只有一个请求发出")]),t._v("，达到多个资源协同响应的效果。")]),t._v(" "),s("p",[t._v("可以让请求从服务器跳转到客户端(或跳转到servlet)")]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ol",[s("li",[t._v("服务端行为")]),t._v(" "),s("li",[t._v("地址栏不会发生改变")]),t._v(" "),s("li",[t._v("从始至终只有一个请求")]),t._v(" "),s("li",[t._v("数据可以共享")])]),t._v(" "),s("p",[t._v("实现:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRequestDispatcher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forward")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// url 为要跳转到的 Servlet 或 html  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给另一个Servlet 传递request 和 response 对象")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("只能跳转一次，结果会返回，地址栏不变")])]),t._v(" "),s("h2",{attrs:{id:"request-作用域-域对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#request-作用域-域对象"}},[t._v("#")]),t._v(" request 作用域(域对象)")]),t._v(" "),s("p",[t._v("通过该对象可以在一个请求中传递数据，作用范围：在一次请求中有效，即服务器跳转有效。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置域对象内容")]),t._v("\nrequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Obeject")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取域对象内容")]),t._v("\nrequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//删除域对象内容")]),t._v("\nrequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("request 域对象中的数据在一次请求中有效，即经过请求转发，request域中的数据依然存在，即在请求转发的过程中可以通过request来传输/共享数据。")]),t._v(" "),s("h1",{attrs:{id:"httpservletresponse-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#httpservletresponse-对象"}},[t._v("#")]),t._v(" HttpServletResponse 对象")]),t._v(" "),s("p",[t._v("主要功能用于服务器对客户端的请求进行响应，将Web服务器处理后的结果返回客户端。service()方法中形参接受的是 HttpServletResponse接口的实例化对象，这个对象封装了向客户端发送数据，发送响应头，发送响应状态码的方法。")]),t._v(" "),s("h2",{attrs:{id:"响应数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应数据"}},[t._v("#")]),t._v(" 响应数据")]),t._v(" "),s("p",[t._v("接收到客户端请求后，可以通过 HttpServletResponse 对象直接进行响应，响应时需要获取输出流。")]),t._v(" "),s("p",[t._v("有两种形式:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("getWrite() 获取字符流(只能响应回字符)")])]),t._v(" "),s("li",[s("strong",[t._v("getOutputStream()获取字节流(能响应一切数据)")])])]),t._v(" "),s("blockquote",[s("p",[t._v("两者不能同时使用，因为response 对象只能响应一次，响应一次后该对象就消失了。")])]),t._v(" "),s("p",[t._v("响应回的数据到客户端被浏览器解析")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符流")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintWriter")]),t._v(" writer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getWrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwriter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwriter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<h2>hello<h2>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字节流")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletOutputStream")]),t._v(" out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOutputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<h2>hello</h2>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"响应乱码问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应乱码问题"}},[t._v("#")]),t._v(" 响应乱码问题")]),t._v(" "),s("p",[t._v("如果响应数据中含有中文，则很有可能出现乱码问题\n，这是"),s("strong",[t._v("服务端")]),t._v("和"),s("strong",[t._v("客户端")]),t._v("的"),s("strong",[t._v("编码格式不同")]),t._v("造成的。")]),t._v(" "),s("h3",{attrs:{id:"getwrite-的字符乱码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getwrite-的字符乱码"}},[t._v("#")]),t._v(" getWrite()的字符乱码")]),t._v(" "),s("p",[t._v("对于getWrite()获取到的字符流必定会乱码，由于服务端在进行编码时默认会使用"),s("code",[t._v("ISO-8859-1")]),t._v("格式编码，该编码不支持中文。\n要解决这种乱码问题，只能在服务端告知服务器使用一种能支持中文的编码格式，如"),s("code",[t._v("UTF-8")]),t._v(";")]),t._v(" "),s("p",[t._v("解决:")]),t._v(" "),s("ol",[s("li",[t._v("设置服务端的编码")]),t._v(" "),s("li",[t._v("设置客户端的编码")])]),t._v(" "),s("blockquote",[s("p",[t._v("即设置客户端和服务端一致的编码格式，且支持中文")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单独设置客户端和服务端的编码格式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在获取输出流前设置服务端编码格式")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCharacterEncoding")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTF-8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置客户端的编码格式和响应的MINE类型")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"content-type"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/html;charset=UTF-8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同时设置客户端和服务端的编码格式")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setContentType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/html;charset=UTF-8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"getoutputstream-字节乱码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getoutputstream-字节乱码"}},[t._v("#")]),t._v(" getOutputStream()字节乱码")]),t._v(" "),s("p",[t._v("由于响应的是字节数据，若服务端与客户端编码不一致同样会出现乱码问题，解决方法与上面是一样的，需要同时设置服务端和客户端的编码格式。")]),t._v(" "),s("h2",{attrs:{id:"重定向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重定向"}},[t._v("#")]),t._v(" 重定向")]),t._v(" "),s("p",[t._v("重定向是一种服务端指导客户端的行为。客户端发出第一个请求被服务器接受处理后，服务器会进行响应，在响应的同时,服务器会给客户端一个新的地址，保存在location中( 下次请求的地址response.sendRedirect(url)),当客户端接收到响应后，会立刻，马上，自动根据服务给的新地址发起第二个请求，服务器接受请求并作出响应，重定向完成")]),t._v(" "),s("p",[t._v("重定向特点：")]),t._v(" "),s("ol",[s("li",[t._v("服务端指导，客户端行为")]),t._v(" "),s("li",[t._v("存在两次请求")]),t._v(" "),s("li",[t._v("地址栏会发生改变")]),t._v(" "),s("li",[t._v("request 对象不共享(数据不共享)")])]),t._v(" "),s("blockquote",[s("p",[t._v("如果不是隐私的信息，其实可以使用"),s("code",[t._v('resp.sendRedirect(url+"?xxx=xx");')]),t._v("的方式在重定向下传输数据")])]),t._v(" "),s("h1",{attrs:{id:"请求转发和重定向的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求转发和重定向的区别"}},[t._v("#")]),t._v(" 请求转发和重定向的区别")]),t._v(" "),s("p",[t._v("请求转发和重定向的比较:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("请求转发(req.getRequestDispatcher().forward(req, resp))")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("重定向(resp.sendRedirect())")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("一次请求，数据在request 域中共享")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("两次请求， request 域中数据不共享")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("服务端行为")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("客户端行为")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("地址栏不改变")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("地址栏改变")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("绝对地址定位到站点后(无法跨域跳转)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("绝对地址可写到 http://")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);
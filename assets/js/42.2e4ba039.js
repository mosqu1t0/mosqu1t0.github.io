(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{586:function(e,t,v){"use strict";v.r(t);var s=v(17),_=Object(s.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"websocket-基础知识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#websocket-基础知识"}},[e._v("#")]),e._v(" Websocket 基础知识")]),e._v(" "),v("p",[e._v("  Websocket 协议是基于tcp的一种新的网络协议，它实现了浏览器与服务器双全工(full-duplex)通信——允许服务器主动发生信息给客户端(优于轮询)")]),e._v(" "),v("p",[e._v("  websocket 是 html5, 新增加特性之一，目的是浏览器与服务端建立全双工的通信方式，解决 http 请求-响应带来过多的资源消耗，同时对特殊场景应用提供了全新的实现方式，比如聊天、股票交易、游戏等对对实时性要求较高的行业领域。")]),e._v(" "),v("p",[e._v("  http与websocket都是基于TCP(传输控制协议)的，websocket可以看做是对http协议的一个补充")]),e._v(" "),v("p",[v("strong",[e._v("使用场景")])]),e._v(" "),v("ul",[v("li",[e._v("弹幕")]),e._v(" "),v("li",[e._v("网页聊天系统")]),e._v(" "),v("li",[e._v("实时监控")]),e._v(" "),v("li",[e._v("股票行情推送")])]),e._v(" "),v("p",[e._v("建立"),v("strong",[e._v("连接的过程")]),e._v(":\n"),v("img",{attrs:{src:"https://user-images.githubusercontent.com/94043894/166627307-108fecb2-087f-4251-ba74-86bbbd2a319d.png",alt:"image"}})]),e._v(" "),v("p",[e._v("客户端：申请协议升级")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("GET / HTTP/1.1\nHost: localhost:8080\nOrigin: http://127.0.0.1:3000\nConnection: Upgrade\nUpgrade: websocket\nSec-WebSocket-Version: 13\nSec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==\n")])])]),v("p",[e._v("服务端：响应协议升级")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("HTTP/1.1 101 Switching Protocols\nConnection:Upgrade\nUpgrade: websocket\nSec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=\n")])])]),v("h2",{attrs:{id:"websocket-应用类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#websocket-应用类型"}},[e._v("#")]),e._v(" websocket 应用类型")]),e._v(" "),v("ul",[v("li",[e._v("单播(Unicast):\n"),v("ul",[v("li",[e._v("点对点，私信私聊")])])]),e._v(" "),v("li",[e._v("广播(Broadcast):\n"),v("ul",[v("li",[e._v("游戏广播，发布公告")])])]),e._v(" "),v("li",[e._v("多播, 组播(Multicast):\n"),v("ul",[v("li",[e._v("多人聊天，发布订阅")])])])]),e._v(" "),v("h2",{attrs:{id:"需要的技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#需要的技术"}},[e._v("#")]),e._v(" 需要的技术")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("后端")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("SpringBoot (websocket)")]),e._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"https://spring.io/GUIDES/GS/MESSAGING-STOMP-WEBSOCKET/"}},[e._v("资料地址")])],1)])]),e._v(" "),v("li",[v("p",[e._v("webjars(前后端未分离)")]),e._v(" "),v("ul",[v("li",[e._v("特点\n"),v("ol",[v("li",[e._v("方便统一管理")]),e._v(" "),v("li",[e._v("主要解决前端框架版本不一致，文件混乱等问题")]),e._v(" "),v("li",[e._v("把前端资源，打包成JAR包，借助MAVEN工具进行管理")])])])])])])]),e._v(" "),v("li",[v("p",[e._v("前端")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("SockJS")]),e._v(" "),v("blockquote",[v("p",[e._v("SockJS是一个JavaScript库，为了应对许多浏览器不支持WebSocket协议的问题，设计了备选SockJs。SockJS 是 WebSocket 技术的一种模拟。SockJS会尽可能对应 WebSocket API，但如果WebSocket 技术不可用的话，会自动降为轮询的方式。")])])]),e._v(" "),v("li",[v("p",[e._v("StompJS")]),e._v(" "),v("blockquote",[v("p",[e._v("STOMP—— Simple Text Oriented Message Protocol——面向消息的简单文本协议。SockJS 为 WebSocket 提供了 备选方案。但无论哪种场景，对于实际应用来说，这种通信形式层级过低。 STOMP协议，来为浏览器 和 server 间的 通信增加适当的消息语义。")])])])])])]),e._v(" "),v("blockquote",[v("p",[e._v("WebSocket、SockJs、STOMP三者关系"),v("br"),e._v("\n简而言之，WebSocket 是底层协议，SockJS 是WebSocket 的备选方案，也是底层协议，而 STOMP 是基于 WebSocket（SockJS）的上层协议。")]),e._v(" "),v("ol",[v("li",[e._v("HTTP协议解决了 web 浏览器发起请求以及 web 服务器响应请求的细节，假设 HTTP 协议 并不存在，只能使用 TCP 套接字来 编写 web 应用。")]),e._v(" "),v("li",[e._v("直接使用 WebSocket（SockJS） 就很类似于 使用 TCP 套接字来编写 web 应用，因为没有高层协议，就需要我们定义应用间所发送消息的语义，还需要确保连接的两端都能遵循这些语义；")]),e._v(" "),v("li",[e._v("同HTTP在TCP 套接字上添加请求-响应模型层一样，STOMP在WebSocket 之上提供了一个基于帧的线路格式层，用来定义消息语义；"),v("br")])]),e._v(" "),v("p",[e._v("通过SockJS、Stomp来进行浏览器兼容，增加消息语义，增强了可用性。")])]),e._v(" "),v("h2",{attrs:{id:"组播"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#组播"}},[e._v("#")]),e._v(" 组播")]),e._v(" "),v("p",[e._v("简述图：\n"),v("img",{attrs:{src:"https://user-images.githubusercontent.com/94043894/166626808-e0abee67-ce66-4955-a892-31cc80be72f6.png",alt:"image"}})]),e._v(" "),v("blockquote",[v("p",[e._v("也许, web服务器也可以和websocket服务器放在一起")])]),e._v(" "),v("h3",{attrs:{id:"html5原生-websocket"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#html5原生-websocket"}},[e._v("#")]),e._v(" Html5原生 websocket")]),e._v(" "),v("p",[e._v("暂且不看底层的实现")]),e._v(" "),v("h4",{attrs:{id:"后端"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#后端"}},[e._v("#")]),e._v(" 后端")]),e._v(" "),v("ol",[v("li",[e._v("SpringBoot 引入相关依赖 并创建 Application")]),e._v(" "),v("li",[e._v("编写一个SessionPool 存放用户的 sessionId")]),e._v(" "),v("li",[e._v("编写一个Endpoint 并定义 客户端连接到后的行为\n"),v("ul",[v("li",[e._v("OnOpen(当客户端建立连接时)")]),e._v(" "),v("li",[e._v("OnClose(当客户端断开连接时)")]),e._v(" "),v("li",[e._v("OnMessage(客户端发送消息时)")])])])]),e._v(" "),v("blockquote",[v("p",[e._v("注意:")]),e._v(" "),v("ol",[v("li",[e._v("储存session的集合 要使用ConcurrentHashMap 多线程安全")]),e._v(" "),v("li",[e._v("使用"),v("code",[e._v("getAsyncRemote()")]),e._v("异步方法发送消息")])])]),e._v(" "),v("h4",{attrs:{id:"前端"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前端"}},[e._v("#")]),e._v(" 前端")]),e._v(" "),v("ol",[v("li",[e._v("通过"),v("code",[e._v("ws:// 样式连接")]),e._v("建立WebSocket对象(此步骤相当于申请协议升级)\n"),v("ul",[v("li",[e._v("此时服务端执行OnOpen方法")])])]),e._v(" "),v("li")])])}),[],!1,null,null,null);t.default=_.exports}}]);
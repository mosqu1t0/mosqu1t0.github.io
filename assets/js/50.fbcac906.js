(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{317:function(t,l,a){"use strict";a.r(l);var v=a(10),s=Object(v.a)({},(function(){var t=this,l=t._self._c;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h2",{attrs:{id:"java内存"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#java内存"}},[t._v("#")]),t._v(" java内存")]),t._v(" "),l("ul",[l("li",[t._v("堆\n"),l("ul",[l("li",[t._v("存放new的对象和数组")]),t._v(" "),l("li",[t._v("可以被所有的线程共享，不会存放别的对象引用")])])]),t._v(" "),l("li",[t._v("栈\n"),l("ul",[l("li",[t._v("存放基本变量类型(会包含这个基本类型的具体数值)")]),t._v(" "),l("li",[t._v("引用对象的变量(会存放这个引用在堆里面的具体地址，即对象在堆中占有内存，而栈中存放引用该内存的地址(指针))")])])]),t._v(" "),l("li",[t._v("方法区\n"),l("ul",[l("li",[t._v("可以被所有的线程共享")]),t._v(" "),l("li",[t._v("包含了所有的class和static变量")])])])])])}),[],!1,null,null,null);l.default=s.exports}}]);
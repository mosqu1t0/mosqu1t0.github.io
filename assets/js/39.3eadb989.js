(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{306:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"接口与继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口与继承"}},[t._v("#")]),t._v(" 接口与继承")]),t._v(" "),s("p",[s("strong",[t._v("接口就像是一种约定")]),t._v("，"),s("strong",[t._v("实现某个接口，就相当于承诺了某种约定")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("创建接口关键字：interface")]),t._v(" "),s("ul",[s("li",[t._v("声明的方法只是一个空方法，没有方法体")])])]),t._v(" "),s("li",[s("p",[t._v("实现接口关键字：implements")]),t._v(" "),s("ul",[s("li",[t._v("实现方法体，必须每个方法都实现")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("一个类中当然可以实现多个接口")]),t._v(" "),s("p",[t._v("在较为复杂的系统中进行大量运用接口，可以条理清晰地把项目组织起来")])]),t._v(" "),s("h2",{attrs:{id:"对象转型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象转型"}},[t._v("#")]),t._v(" 对象转型")]),t._v(" "),s("p",[t._v("通常引用和对象的类型是一样的，即"),s("code",[t._v("Bad boy = new Bad();")])]),t._v(" "),s("p",[t._v("而类型转换讨论的问题是"),s("strong",[t._v("引用类型和对象类型")]),t._v("不一致的情况下的转换问题")]),t._v(" "),s("p",[t._v("类型转换有时候会成功，有时候会失败，判断的方法是"),s("strong",[t._v("把右边的当做左边来用")]),t._v("，是否合理")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("有继承关系")]),t._v("的类转换")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("子类转父类(向上转型)")]),t._v(" "),s("ul",[s("li",[t._v("所有的"),s("strong",[t._v("子类转换为父类")]),t._v("都是合法的，类似普通变量的类型转换(低转高，自动进行)")])])]),t._v(" "),s("li",[s("p",[t._v("父类转子类(向下转型)")]),t._v(" "),s("ul",[s("li",[t._v("父类转子类，有的时候行，有的时候不行，所以必须进行强制转换\n"),s("ul",[s("li",[t._v("父转子可成功，成功转换后该引用无法再当为父来使用")]),t._v(" "),s("li",[t._v("强制转换失败会抛出"),s("strong",[t._v("异常")])])])])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("无继承关系")]),t._v("的类转换")]),t._v(" "),s("ul",[s("li",[t._v("没有继承关系的两个类，互相转换，一定会失败")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现类")]),t._v("转换成"),s("strong",[t._v("接口")]),t._v("(向上转型)")]),t._v(" "),s("ul",[s("li",[t._v("实现类中一定存在接口中声明的方法，因此，转换是一定成功的")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("接口")]),t._v("转换成"),s("strong",[t._v("实现类")]),t._v("(向下转型)")]),t._v(" "),s("ul",[s("li",[t._v("接口中未定义有实现类中的其他方法，因此转换会失败")])])])]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("注意")]),t._v("：类之间的转换如果是赋值形式，且为向下转换(父传子)，如果成功的话，会先将引用指向对象，再转换引用类型，此时转换成功的引用指向的应该为子类，且引用类型也为子类的了")])]),t._v(" "),s("h2",{attrs:{id:"instanceof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),s("p",[s("code",[t._v("A instanceof B")]),t._v("判断A是否为B类型，或B的子类")]),t._v(" "),s("h2",{attrs:{id:"重写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重写"}},[t._v("#")]),t._v(" 重写")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("子类可以继承父类的对象方法，在继承后，重复提供该方法，就叫做方法的重写，又叫覆盖 override")])]),t._v(" "),s("li",[s("p",[t._v("子类调用重写的方法调用就会执行重写的方法，而不是从父类的方法")])])]),t._v(" "),s("h2",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),s("ul",[s("li",[t._v("操作符的多态\n"),s("ul",[s("li",[s("code",[t._v("+")]),t._v("可以作为算数运算，也可以作为字符串连接")])])]),t._v(" "),s("li",[t._v("类的多态\n"),s("ul",[s("li",[t._v("父类引用指向子类对象")])])])]),t._v(" "),s("p",[s("strong",[t._v("类的多态")])]),t._v(" "),s("p",[t._v("都是同一个类型，调用同一个方法，却能呈现不同的状态")]),t._v(" "),s("p",[t._v("若方法只是有一点区别，只需要定义一个方法，不同的子类重写方法即可适应很多情况，剩下写更多方法的功夫")]),t._v(" "),s("p",[t._v("条件：")]),t._v(" "),s("ol",[s("li",[s("s",[t._v("父类(接口)引用指向子类对象")]),t._v("只要有继承关系(implements 接口)就可以了")]),t._v(" "),s("li",[t._v("调用的方法有重写")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Man")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("saySomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i am a man."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Goodman")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Man")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t\t\t\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("saySomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//条件2 方法的重写")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i am a good man."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Badman")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Man")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("saySomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i am a bad man."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Man")]),t._v(" pes1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Goodman")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Man")]),t._v(" pes2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Badman")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//条件1 父类引用指向子类")]),t._v("\n    \n    per1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("saySomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    per2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("saySomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实现多态")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("若父类中实现接口，即使子类没有implements也可以重写接口，实现接口多态")])]),t._v(" "),s("h2",{attrs:{id:"隐藏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐藏"}},[t._v("#")]),t._v(" 隐藏")]),t._v(" "),s("p",[t._v("与重写类似，方法的"),s("strong",[t._v("重写")]),t._v("是子类覆盖父类的"),s("strong",[t._v("对象方法")]),t._v("，"),s("strong",[t._v("隐藏")]),t._v("是子类覆盖父类的"),s("strong",[t._v("类方法")])]),t._v(" "),s("blockquote",[s("p",[t._v("当实例化对象引用为父类，指向子类时，即使子类隐藏了类方法，该对象调用的类方法还是父类的")])]),t._v(" "),s("h2",{attrs:{id:"super"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#super"}},[t._v("#")]),t._v(" super")]),t._v(" "),s("p",[t._v("实例化一个"),s("strong",[t._v("子类")]),t._v("时，会"),s("strong",[t._v("先调用")]),t._v("其"),s("strong",[t._v("父类的构造方法")]),t._v("，再调用其构造方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("子类构造方法会默认调用父类的无参构造方法")])]),t._v(" "),s("li",[s("p",[t._v("若父类有带参构造方法，子类的构造方法中使用"),s("code",[t._v("super(xxx)")]),t._v("  可以调用父的带參构造方法")]),t._v(" "),s("ul",[s("li",[t._v("同理，使用this()调用子类中的有参构造方法")])])]),t._v(" "),s("li",[s("p",[t._v("使用"),s("code",[t._v("super.xxx")]),t._v("调用父属性")])]),t._v(" "),s("li",[s("p",[t._v("使用"),s("code",[t._v("super.xxx()")]),t._v("调用父方法")])])]),t._v(" "),s("blockquote",[s("ol",[s("li",[s("p",[t._v("父类提供了有参构造方法，系统不会再提供无参构造方法")])]),t._v(" "),s("li",[s("p",[t._v("创建子类对象时，会先调用其父类的构造方法，而此时父类没有无参构造，所以需要用super关键字去调用父类的有参构造方法")])]),t._v(" "),s("li",[s("p",[t._v("且要写在子类构造方法的前面")])])])]),t._v(" "),s("h2",{attrs:{id:"object类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object类"}},[t._v("#")]),t._v(" Object类")]),t._v(" "),s("ul",[s("li",[t._v("Object类是所有类的父类\n"),s("ul",[s("li",[t._v("声明一个类的时候，默认是继承了Object")])])]),t._v(" "),s("li",[t._v("Object类提供一个toString方法，所以所有的类都有toString方法\n"),s("ul",[s("li",[t._v("toString()的意思是返回当前对象的"),s("strong",[t._v("字符串表达")])])])]),t._v(" "),s("li",[t._v("当一个对象没有任何引用指向的时候，它就满足垃圾回收的条件当它被垃圾回收的时候，它的finalize() 方法就会被调用。")]),t._v(" "),s("li",[t._v("equals() 用于判断两个对象的内容是否相同")]),t._v(" "),s("li",[s("code",[t._v("==")]),t._v("用于判断两个引用，是否指向了同一个对象")]),t._v(" "),s("li",[t._v("hashCode方法返回一个对象的哈希值")]),t._v(" "),s("li",[t._v("线程同步相关方法\n"),s("ul",[s("li",[t._v("wait()， notify()， notifyAll()")])])]),t._v(" "),s("li",[t._v("getClass()会返回一个对象的"),s("a",{attrs:{href:"https://how2j.cn/k/reflection/reflection-class/108.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("类对象"),s("OutboundLink")],1),t._v("，属于高级内容，不适合初学者过早接触，关于类对象的详细内容请参考反射机制")])]),t._v(" "),s("blockquote",[s("p",[t._v("finalize() 不是开发人员主动调用的方法，而是由虚拟机JVM调用的，可以重写子类的finalize方法")])]),t._v(" "),s("h2",{attrs:{id:"final"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#final"}},[t._v("#")]),t._v(" final")]),t._v(" "),s("p",[t._v("final修饰类，方法，基本类型变量，引用的时候分别有不同的意思。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("修饰类\t表示该类不能被继承，其子类会出现编译错误")])]),t._v(" "),s("li",[s("p",[t._v("修饰方法\t该方法无法被重写")])]),t._v(" "),s("li",[s("p",[t._v("修饰基本类型变量\t表示该变量只有一次赋值的机会")])]),t._v(" "),s("li",[s("p",[t._v("修饰引用\t该引用只有1次指向对象的机会")])]),t._v(" "),s("li",[s("p",[t._v("修饰常量\t指的是可以公开，直接访问，不会变化的值")])])]),t._v(" "),s("h2",{attrs:{id:"抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[t._v("#")]),t._v(" 抽象类")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在类中声明一个方法，这个方法没有实现体，是一个“空”方法")])]),t._v(" "),s("li",[s("p",[t._v('这样的方法就叫抽象方法，使用修饰符“abstract"')])]),t._v(" "),s("li",[s("p",[t._v("当一个类有"),s("strong",[t._v("抽象方法")]),t._v("的时候，该类必须被声明为"),s("strong",[t._v("抽象类")]),t._v("，并且其"),s("strong",[t._v("子类")]),t._v("必须提供方法实现")])]),t._v(" "),s("li",[s("p",[t._v("抽象类可以没有抽象方法，且抽象类无法被直接实例化，除非在实例化时完成抽象方法")])])]),t._v(" "),s("p",[t._v("抽象类与接口的区别")]),t._v(" "),s("ol",[s("li",[t._v("子类只能继承"),s("strong",[t._v("一个")]),t._v("抽象类，不能继承多个，子类可以实现"),s("strong",[t._v("多个")]),t._v("接口")]),t._v(" "),s("li",[t._v("抽象类可以定义public,protected,package,private，静态和非静态属性，final和非final属性，但是接口中声明的属性，只能是public，静态的，final的，即便没有显式的声明")])]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("注")]),t._v("：抽象类和接口类都可以有实体方法。接口中的实体方法叫做默认方法")])]),t._v(" "),s("h2",{attrs:{id:"内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部类"}},[t._v("#")]),t._v(" 内部类")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("非静态内部类")])]),t._v(" "),s("li",[s("p",[t._v("静态内部类")])]),t._v(" "),s("li",[s("p",[t._v("匿名类")])]),t._v(" "),s("li",[s("p",[t._v("本地类")])])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("非静态内部类 "),s("strong",[t._v("只有当外部类的")]),t._v("对象")]),t._v("存在，才有意义\n"),s("ul",[s("li",[t._v("即"),s("code",[t._v("new 外部类().new 内部类();")]),t._v(" 或 "),s("code",[t._v("外部对象.new 内部类();")])]),t._v(" "),s("li",[t._v("非静态内部类，是可以直接访问外部类的"),s("strong",[t._v("private")]),t._v("实例属性的")])])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Littleclas")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" one "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实例化内部类必须建立在一个外部类对象的基础之上")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Littleclas")]),t._v(" two "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Littleclas")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[s("strong",[t._v("静态内部类 "),s("strong",[t._v("实例化")]),t._v("不需要一个外部类的实例为基础")]),t._v("，可以直接实例化")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("即"),s("code",[t._v("new 外部类.静态内部类();")])])]),t._v(" "),s("li",[s("p",[t._v("因为没有一个外部类的实例，所以在静态内部类里面"),s("strong",[t._v("不可以访问外部类的实例属性和方法")])])]),t._v(" "),s("li",[s("p",[t._v("除了可以访问外部类的"),s("strong",[t._v("私有静态成员外")]),t._v("，静态内部类和普通类没什么大的区别")])])])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Littleclas")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不能访问外部类的实例属性和方法，可以访问私有静态的成员")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Littleclas")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Littleclas")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实例化静态内部类")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[s("strong",[t._v("匿名类 "),s("strong",[t._v("指的是在")]),t._v("声明一个类的同时实例化它")]),t._v("，使代码更加简洁精练\n"),s("ul",[s("li",[t._v("有的时候，为了快速使用，直接实例化一个抽象类，并“"),s("strong",[t._v("当场")]),t._v("”实现其抽象方法。既然实现了抽象方法，那么就是一个新的类，只是这个类，没有命名。这样的类，叫做匿名类")])])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("saySomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" one "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("saySomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[s("strong",[t._v("本地类")]),t._v(" 可以理解为有名字的匿名类")])]),t._v(" "),s("ul",[s("li",[t._v("内部类与匿名类不一样的是，内部类必须声明在成员的位置，即与属性和方法平等的位置")]),t._v(" "),s("li",[t._v("本地类和匿名类一样，直接声明在代码块里面，可以是主方法，for循环里等等地方")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("saySomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Onething")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//与匿名类的区别在于，本地类有了自定义的类名")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("saySomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Onething")]),t._v(" one "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Onething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[s("em",[t._v("注")]),t._v("：匿名类中使用外部的局部变量，外部的局部变量必须修饰为final，在jdk8中，已经不需要强制修饰成final了，如果没有写final，不会报错，因为编译器"),s("strong",[t._v("偷偷的")]),t._v("帮你加上了看不见的final")])]),t._v(" "),s("h2",{attrs:{id:"默认方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认方法"}},[t._v("#")]),t._v(" 默认方法")]),t._v(" "),s("p",[t._v("默认方法是JDK8新特性，指的是接口也可以提供具体方法了，而不像以前，只能提供抽象方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("What")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("comeOn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("saySomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"what\'s new?"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("同时继承")]),t._v("了多个接口的 "),s("strong",[t._v("同名默认方法")]),t._v("，就必须在"),s("strong",[t._v("实现类")]),t._v("中"),s("strong",[t._v("重写")]),t._v("该方法 从而免去到底调用哪个接口的默认方法这个模棱两可的问题")]),t._v(" "),s("blockquote",[s("p",[t._v("假设没有默认方法这种机制，那么如果要为Mortal增加一个新的方法revive,那么所有实现了Mortal接口的类，都需要做改动。但是引入了默认方法后，原来的类，不需要做任何改动，并且还能"),s("strong",[t._v("得到")]),t._v("这个默认方法通过这种手段，就能够很好的扩展新的类，并且做到不影响原来的类")])])])}),[],!1,null,null,null);s.default=e.exports}}]);
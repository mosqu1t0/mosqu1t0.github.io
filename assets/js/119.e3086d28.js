(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{384:function(t,e,r){"use strict";r.r(e);var a=r(10),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),e("p",[t._v("redux 将所有数据存储到树中，且树是唯一的。")]),t._v(" "),e("h2",{attrs:{id:"redux-基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux-基本概念"}},[t._v("#")]),t._v(" Redux 基本概念")]),t._v(" "),e("ul",[e("li",[t._v("store：存储树结构。")]),t._v(" "),e("li",[t._v("state：维护的数据，一般维护成树的结构。")]),t._v(" "),e("li",[t._v("reducer：对 state 进行更新的函数，每个 state 绑定一个 reducer。传入两个参数：当前 state 和 action，返回新 state。")]),t._v(" "),e("li",[t._v("action：一个普通对象，存储 reducer 的传入参数，一般描述对 state 的更新类型。")]),t._v(" "),e("li",[t._v("dispatch：传入一个参数 action，对整棵 state 树操作一遍。")])]),t._v(" "),e("h2",{attrs:{id:"react-redux-基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-redux-基本概念"}},[t._v("#")]),t._v(" React-Redux 基本概念")]),t._v(" "),e("ul",[e("li",[t._v("Provider 组件：用来包裹整个项目，其 store 属性用来存储 redux 的 store 对象。")]),t._v(" "),e("li",[t._v("connect(mapStateToProps, mapDispatchToProps)函数：用来将 store 与组件关联起来。\n"),e("ul",[e("li",[t._v("mapStateToProps：每次 store 中的状态更新后调用一次，用来更新组件中的值。")]),t._v(" "),e("li",[t._v("mapDispatchToProps：组件创建时调用一次，用来将 store 的 dispatch 函数传入组件。")])])])]),t._v(" "),e("h2",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("ul",[e("li",[t._v("npm i redux react-redux @reduxjs/toolkit")])])])}),[],!1,null,null,null);e.default=s.exports}}]);
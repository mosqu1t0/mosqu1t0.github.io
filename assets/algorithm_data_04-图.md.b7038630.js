import{_ as p,c as t,o as e,a,b as n,d as s}from"./app.da4fd731.js";const _='{"title":"\u56FE","description":"","frontmatter":{"title":"\u56FE","tags":["Algorithm","DataStructures"]},"headers":[{"level":2,"title":"\u65E0\u5411\u56FE","slug":"\u65E0\u5411\u56FE"},{"level":3,"title":"\u4E8C\u5206\u56FE","slug":"\u4E8C\u5206\u56FE"},{"level":3,"title":"\u6700\u5C0F\u751F\u6210\u6811","slug":"\u6700\u5C0F\u751F\u6210\u6811"}],"relativePath":"algorithm/data/04-\u56FE.md","lastUpdated":1656421296000}',o={},c=a(`<h1 id="\u56FE" tabindex="-1">\u56FE <a class="header-anchor" href="#\u56FE" aria-hidden="true">#</a></h1><h2 id="\u65E0\u5411\u56FE" tabindex="-1">\u65E0\u5411\u56FE <a class="header-anchor" href="#\u65E0\u5411\u56FE" aria-hidden="true">#</a></h2><h3 id="\u4E8C\u5206\u56FE" tabindex="-1">\u4E8C\u5206\u56FE <a class="header-anchor" href="#\u4E8C\u5206\u56FE" aria-hidden="true">#</a></h3><p>\u5C06\u6240\u6709\u70B9\u5206\u6210\u4E24\u4E2A\u96C6\u5408\uFF0C\u4F7F\u5F97\u6240\u6709\u8FB9\u53EA\u51FA\u73B0\u5728\u96C6\u5408\u4E4B\u95F4\uFF0C\u5C31\u662F\u4E8C\u5206\u56FE</p><p>\u4E00\u4E2A\u4E8C\u5206\u56FE\u5F53\u4E14\u4EC5\u5F53\u8BE5\u56FE\u4E0D\u542B\u6709\u5947\u6570\u73AF</p><ol><li>\u67D3\u8272\u6CD5\u5224\u65AD\u4E8C\u5206\u56FE</li><li>\u5308\u7259\u5229\u7B97\u6CD5\u4E8C\u5206\u56FE\u6700\u5927\u5339\u914D</li></ol><h4 id="\u67D3\u8272\u6CD5" tabindex="-1">\u67D3\u8272\u6CD5 <a class="header-anchor" href="#\u67D3\u8272\u6CD5" aria-hidden="true">#</a></h4><div class="language-cpp line-numbers-mode"><pre><code><span class="token comment">//dfs \u7248</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span>
<span class="token keyword">int</span> color<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>
    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
    h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>  <span class="token comment">//\u5148\u5C06\u8BE5\u70B9\u67D3\u8272</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//\u4E0E\u8BE5\u70B9\u76F8\u8FDE\u7684\u672A\u67D3\u8272\u7684\u70B9\u67D3\u8272</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//\u5982\u679C\u67D3\u6210\u5176\u4ED6\u989C\u8272\u5931\u8D25\uFF0C\u5219\u8BF4\u660E\u56FE\u6709\u6709\u5947\u6570\u73AF</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> color<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//\u5982\u679C\u8BE5\u70B9\u5DF2\u7ECF\u67D3\u4E3A c \u8272\uFF0C\u5219\u77DB\u76FE\uFF0C\u56FE\u6709\u5947\u6570\u73AF</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//\u82E5\u67D3\u8272\u5931\u8D25\uFF0C\u5219\u8BF4\u660E\u56FE\u6709\u5947\u6570\u73AF\uFF0C\u67D3\u8272\u77DB\u76FE\u3002</span>
                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><h3 id="\u6700\u5C0F\u751F\u6210\u6811" tabindex="-1">\u6700\u5C0F\u751F\u6210\u6811 <a class="header-anchor" href="#\u6700\u5C0F\u751F\u6210\u6811" aria-hidden="true">#</a></h3><p>\u6700\u5C0F\u751F\u6210\u6811\u95EE\u9898\uFF1A\u4ECE\u4E00\u4E2A\u65E0\u5411\u56FE\u4E2D\u9009\u51FA\u67D0\u4E9B\u8FB9\uFF0C\u7EC4\u6210 <strong>\u6743\u91CD\u548C\u6700\u5C0F</strong> \u4E14\u7ECF\u8FC7 <strong>\u6240\u6709\u70B9</strong> \u7684\u6811\u3002</p><blockquote><p>\u8FD9\u91CC\u7684\u6811\u548C\u65E0\u5411\u56FE\u56FE\u7684\u533A\u522B\uFF1A\u6811\u4E0D\u5B58\u5728\u95ED\u73AF\uFF0C\u4E14\u6240\u6709\u8FB9\u6570\u7B49\u4E8E\u70B9\u6570\u51CF\u4E00</p></blockquote><br><p>\u4E3B\u8981\u6709\u4E24\u79CD\u7B97\u6CD5\uFF1A</p><ol><li>Prim</li><li>kruscal</li></ol><br><h4 id="prim" tabindex="-1">Prim <a class="header-anchor" href="#prim" aria-hidden="true">#</a></h4><p>prim \u548C dijkstra \u7684\u601D\u60F3\u51E0\u4E4E\u662F\u4E00\u81F4\u7684\uFF0C\u6BCF\u6B21\u9700\u8981\u4F7F\u7528\u6700\u5C0F\u7684\u8FB9\u66F4\u65B0\u5176\u4ED6\u8FB9\uFF0C\u4E0D\u540C\u7684\u662F prim \u9700\u8981\u628A\u79BB\u96C6\u5408\u6700\u8FD1\u7684\u70B9\u52A0\u5165\u96C6\u5408\uFF0C\u56E0\u6B64\u66F4\u65B0\u8DDD\u79BB\u65F6\uFF0C\u4E0D\u662F\u66F4\u65B0\u51FA\u53D1\u70B9\u5230\u67D0\u70B9\u7684\u8DDD\u79BB\u800C\u662F\u8BE5\u70B9\u5230\u96C6\u5408\u7684\u8DDD\u79BB\uFF08\u8BB2\u4EBA\u8BDD\u5C31\u662F\u66F4\u65B0\u8FB9\u4E3A\u67D0\u70B9\u5230\u76EE\u524D\u70B9\u7684\u8DDD\u79BB\uFF09\uFF0C\u5F53\u6240\u6709\u7684\u70B9\u90FD\u52A0\u5165\u96C6\u5408\u65F6\uFF0C\u5B8C\u6210\u9009\u6811\uFF0C\u82E5\u67D0\u70B9\u65E0\u6CD5\u8FDE\u4E0A\uFF0C\u5219\u5EFA\u6811\u5931\u8D25\u3002</p><p>\u6B65\u9AA4\uFF1A</p><ol><li>updata\uFF08\u66F4\u65B0\u8DDD\u79BB\u6570\u7EC4\uFF09</li><li>scan\uFF08\u627E\u5230\u79BB\u96C6\u5408\u6700\u8FD1\u7684\u70B9\uFF09</li><li>add\uFF08\u5C06\u8BE5\u70B9\u52A0\u5165\u96C6\u5408\uFF09</li></ol><p>\u590D\u6742\u5EA6\uFF1A</p>`,20),l=n("ul",null,[n("li",null,[s("\u65F6\u95F4\uFF1A"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",null,[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",null,"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",null,")")]),n("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"strut",style:{height:"0.8141079999999999em"}}),n("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),n("span",{class:"base textstyle uncramped"},[n("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathit"},"n"),n("span",{class:"vlist"},[n("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",{class:"reset-textstyle scriptstyle uncramped"},[n("span",{class:"mord mathrm"},"2")])]),n("span",{class:"baseline-fix"},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),s("\u200B")])])]),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("\u7A7A\u95F4\uFF1A "),n("ul",null,[n("li",null,[s("\u7A00\u758F\u56FE\uFF1A"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",null,[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",null,"("),n("mi",null,"n"),n("mo",null,")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"strut",style:{height:"0.75em"}}),n("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"base textstyle uncramped"},[n("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathit"},"n"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("\u7A20\u5BC6\u56FE\uFF1A"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",null,[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",null,"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",null,")")]),n("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"strut",style:{height:"0.8141079999999999em"}}),n("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),n("span",{class:"base textstyle uncramped"},[n("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathit"},"n"),n("span",{class:"vlist"},[n("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",{class:"reset-textstyle scriptstyle uncramped"},[n("span",{class:"mord mathrm"},"2")])]),n("span",{class:"baseline-fix"},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),s("\u200B")])])]),n("span",{class:"mclose"},")")])])])])])])],-1),u=a(`<div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">,</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//\u8BB0\u5F55\u6811\u7684\u6240\u6709\u8FB9\u957F\u548C</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//\u6BCF\u6B21\u5FAA\u73AF\u90FD\u8981\u627E\u5230\u4E00\u4E2A\u70B9\u52A0\u5165\u96C6\u5408</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                t <span class="token operator">=</span> j<span class="token punctuation">;</span>  <span class="token comment">//\u9009\u51FA\u672A\u5728\u96C6\u5408\u4E2D\u79BB\u96C6\u5408\u6700\u8FD1\u7684\u70B9</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token keyword">return</span> INF<span class="token punctuation">;</span>  <span class="token comment">//\u82E5\u51FA\u73B0\u65E0\u6CD5\u8FDE\u5230\u67D0\u70B9\u7684\u60C5\u51B5\uFF0C\u8BF4\u660E\u65E0\u6CD5\u5EFA\u6811\uFF0Cabandon</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> sum <span class="token operator">+=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>
        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//\u628A\u70B9\u52A0\u5165\u96C6\u5408</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u66F4\u65B0\u6700\u65B0\u52A0\u5165\u96C6\u5408\u7684\u70B9\u80FD\u5230\u8FBE\u7684\u70B9\u7684\u8DDD\u79BB</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>
        g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u51FA\u73B0\u91CD\u8FB9\u53EA\u5B58\u6700\u5C0F\u7684</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;impossible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><br><h4 id="kruscal" tabindex="-1">Kruscal <a class="header-anchor" href="#kruscal" aria-hidden="true">#</a></h4><p>kruscal \u7B97\u6CD5\u975E\u5E38\u5389\u5BB3\uFF0C\u8FD9\u5F88\u5927\u53EF\u80FD\u5F97\u5229\u4E8E\u5B83\u57FA\u4E8E\u4E86\u8D2A\u5FC3\u7684\u601D\u60F3\u3002kruscal \u4E0D\u9700\u8981\u4F7F\u7528\u590D\u6742\u7684\u6570\u636E\u7ED3\u6784\u5B58\u56FE\uFF0C\u53EA\u9700\u8981\u5C06\u6BCF\u6761\u8FB9\u7684\u4FE1\u606F\u5B58\u4E0B\u6765\uFF0C\u6392\u5E8F\uFF0C\u518D\u7528\u5E76\u67E5\u96C6\u5C06\u6811\u7684\u8FB9\u9009\u51FA\u6765\u5373\u53EF\uFF0C\u5373\u6309\u5C0F\u5230\u5927\u7684\u987A\u5E8F\u9009\u8FB9\uFF0C\u5224\u65AD\u8981\u9009\u53D6\u7684\u8FB9\u662F\u5426\u6784\u6210\u95ED\u73AF\uFF0C\u6784\u6210\u5219\u4E0D\u9009\uFF0C\u4E0D\u6784\u6210\u5219\u9009\uFF08\u5F53\u4E14\u4EC5\u5F53\u4E24\u4E2A\u70B9\u672A\u5904\u4E8E\u540C\u4E00\u4E2A\u96C6\u5408\u4E2D\u65F6\u8BF4\u660E\u65E0\u6CD5\u6784\u6210\u95ED\u73AF\uFF09\u3002</p><blockquote><p>\u8DEF\u5F84\u538B\u7F29\u4F18\u5316\u540E\u7684\u5E76\u67E5\u96C6\u5355\u6B21\u63D2\u5165\u67E5\u8BE2\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(1)\uFF0C\u56E0\u6B64\u603B\u65F6\u95F4\u590D\u6742\u5EA6\u6700\u5927\u53D6\u51B3\u4E8E\u6392\u5E8F</p></blockquote><p>\u590D\u6742\u5EA6\uFF1A</p>`,6),r=n("ul",null,[n("li",null,[s("\u65F6\u95F4\uFF1A"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",null,[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",null,"("),n("mi",null,"m"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"m"),n("mo",null,")")]),n("annotation",{encoding:"application/x-tex"},"O(mlogm)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"strut",style:{height:"0.75em"}}),n("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"base textstyle uncramped"},[n("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathit"},"m"),n("span",{class:"mord mathit",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathit"},"o"),n("span",{class:"mord mathit",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathit"},"m"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("\u7A7A\u95F4\uFF1A"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",null,[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",null,"("),n("mi",null,"m"),n("mo",null,")")]),n("annotation",{encoding:"application/x-tex"},"O(m)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"strut",style:{height:"0.75em"}}),n("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"base textstyle uncramped"},[n("span",{class:"mord mathit",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathit"},"m"),n("span",{class:"mclose"},")")])])])])],-1),i=a(`<div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Edge</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Edge <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> w <span class="token operator">&lt;</span> T<span class="token punctuation">.</span>w<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//\u5B58\u8FB9\u7684\u4FE1\u606F</span>
    <span class="token punctuation">}</span>

    <span class="token function">sort</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> e <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u6309\u8FB9\u6743\u91CD\u6392\u5E8F</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment">//\u521D\u59CB\u5316\u5E76\u67E5\u96C6</span>

    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//\u8BB0\u5F55\u6811\u6240\u6709\u8FB9\u957F\u548C\uFF0C\u8BB0\u5F55\u5DF2\u9009\u8FB9\u6570</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>  i <span class="token operator">&lt;</span> m <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">,</span> w <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>

        a <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//\u82E5\u4E2A\u70B9\u672A\u8FDE\u63A5\u8FC7\uFF0C\u8FDE\u8D77\u6765\uFF0C\u8BB0\u5F55\u8FB9\u957F</span>
            p<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>
            res <span class="token operator">+=</span> w<span class="token punctuation">;</span>
            cnt <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;impossible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u6700\u7EC8\u9009\u8FB9\u957F\u5C0F\u4E8E n - 1 \u8BF4\u660E\u6709\u70B9\u6CA1\u8FDE\u4E0A abandon</span>
    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div>`,1),k=[c,l,u,r,i];function m(b,d,y,h,w,g){return e(),t("div",null,k)}var x=p(o,[["render",m]]);export{_ as __pageData,x as default};

import{_ as n,c as s,o as a,a as p}from"./app.613f37bf.js";const m='{"title":"\u7EC4\u5408\u6570\u5B66","description":"","frontmatter":{"title":"\u7EC4\u5408\u6570\u5B66","date":"2022-04-15T20:21:21.000Z","tags":["Algorithm","Math"]},"headers":[{"level":2,"title":"\u7EC4\u5408\u6570","slug":"\u7EC4\u5408\u6570"},{"level":3,"title":"\u9012\u63A8\u6C42\u89E3","slug":"\u9012\u63A8\u6C42\u89E3"},{"level":3,"title":"\u9884\u5904\u7406\u6C42\u89E3","slug":"\u9884\u5904\u7406\u6C42\u89E3"},{"level":3,"title":"\u5362\u5361\u65AF\u5B9A\u7406\u6C42\u89E3","slug":"\u5362\u5361\u65AF\u5B9A\u7406\u6C42\u89E3"},{"level":2,"title":"\u6768\u8F89\u4E09\u89D2","slug":"\u6768\u8F89\u4E09\u89D2"},{"level":2,"title":"\u6392\u5217\u6570","slug":"\u6392\u5217\u6570"},{"level":2,"title":"\u9519\u6392\u516C\u5F0F","slug":"\u9519\u6392\u516C\u5F0F"},{"level":2,"title":"\u5361\u5854\u5170\u6570","slug":"\u5361\u5854\u5170\u6570"},{"level":2,"title":"\u7EC4\u5408\u8BB0\u6570","slug":"\u7EC4\u5408\u8BB0\u6570"},{"level":2,"title":"\u9012\u63A8","slug":"\u9012\u63A8"},{"level":3,"title":"\u5E38\u89C1\u7684\u9012\u63A8","slug":"\u5E38\u89C1\u7684\u9012\u63A8"},{"level":2,"title":"\u9E3D\u527F\u539F\u7406","slug":"\u9E3D\u527F\u539F\u7406"},{"level":3,"title":"\u63A8\u5E7F","slug":"\u63A8\u5E7F"},{"level":2,"title":"\u5BB9\u65A5\u539F\u7406","slug":"\u5BB9\u65A5\u539F\u7406"}],"relativePath":"algorithm/math/02-\u7EC4\u5408\u6570\u5B66.md","lastUpdated":1654002262000}',t={},o=p(`<h1 id="\u7EC4\u5408\u6570\u5B66" tabindex="-1">\u7EC4\u5408\u6570\u5B66 <a class="header-anchor" href="#\u7EC4\u5408\u6570\u5B66" aria-hidden="true">#</a></h1><h2 id="\u7EC4\u5408\u6570" tabindex="-1">\u7EC4\u5408\u6570 <a class="header-anchor" href="#\u7EC4\u5408\u6570" aria-hidden="true">#</a></h2><p>\u76F4\u63A5\u6C42\u89E3 \u7EC4\u5408\u6570\u516C\u5F0F\uFF1A $C_n^m = \\frac{n!}{m!(n - m)!}$</p><p>\u590D\u6742\u5EA6\uFF1A</p><ul><li>\u65F6\u95F4\uFF1A$O(m)$</li></ul><p>\u7279\u70B9\uFF1A</p><ul><li>\u6C42\u5355\u4E2A\u7EC4\u5408\u6570</li></ul><div class="language-cpp"><pre><code>include <span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
ll res<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

ll <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b <span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">,</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span> res <span class="token operator">*</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span> <span class="token comment">//\u4F1A\u66B4long long </span>
    
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>
    
    res <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><hr><p>\u9AD8\u7CBE\u5EA6\u76F4\u63A5\u6C42\u89E3<br></p><p>\u7531\u5206\u89E3\u8D28\u56E0\u6570\u90E8\u5206\u53EF\u77E5\uFF0C\u4EFB\u4F55\u4E00\u4E2A\u5408\u6570<code>N</code>\u90FD\u53EF\u4EE5\u5199\u6210$N = p_1^{a_1}p_2^{a_2}...p_k^{a_k}$\uFF0C\u5373\u82E5\u5E72\u4E2A\u8D28\u6570\u7684\u82E5\u5E72\u6B21\u5E42\u7684\u79EF</p><p>\u53C8\u7531\u9636\u4E58\u90E8\u5206\u53EF\u77E5\uFF0C\u9636\u4E58\u4E2D\u8D28\u56E0\u6570\u7684\u6307\u6570\uFF1A$cnt_pmi(a!)= \\left\\lfloor\\frac{a}{p}\\right\\rfloor + \\left\\lfloor\\frac{a}{p^2}\\right\\rfloor + ... + \\left\\lfloor\\frac{a}{p^k}\\right\\rfloor$ <br></p><p>\u90A3\u4E48\u53EA\u8981\u5148\u7B5B\u9009\u51FA\u8D28\u6570</p><p>\u7136\u540E\u5206\u522B\u6C42\u51FA\u5404\u4E2A\u8D28\u6570\u7684$cnt_p(a!)mi, cnt_p(b!)mi, cnt_p(( a - b )!)mi$</p><p>\u6839\u636E\u7EC4\u5408\u6570\u516C\u5F0F\uFF1A $C_a^b = \\frac{a!}{b!(a - b)!}$ \u7B97\u51FA\u6240\u6709\u8D28\u6570\u7684\u6307\u6570\uFF0C\u5373$k = cnt_pmi(a!) - cnt_pmi(b!) - cnt_pmi((a - b)!)$</p><p>\u6700\u540E\u7528\u5927\u6570\u4E58\u5C0F\u6570\u7684\u65B9\u5F0F\u628A\u7ED3\u679C\u7B97\u51FA\u6765</p><div class="language-cpp"><pre><code>include <span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span>
include <span class="token operator">&lt;</span>vector<span class="token operator">&gt;</span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">5010</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>
<span class="token keyword">int</span> k<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        a <span class="token operator">/=</span> p<span class="token punctuation">;</span>
        res <span class="token operator">+=</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> c<span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        t <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>
        c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>
    
    <span class="token function">get_primes</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u7EBF\u6027\u7B5B\u6CD5</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt  <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> p <span class="token operator">=</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">get</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u83B7\u53D6\u6307\u6570</span>
        
    <span class="token punctuation">}</span>
    
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            res <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u5C06\u8D28\u6570\u7684k\u6B21\u65B9\u5168\u90E8\u4E58\u8D77\u6765</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span>  <span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>
        
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="\u9012\u63A8\u6C42\u89E3" tabindex="-1">\u9012\u63A8\u6C42\u89E3 <a class="header-anchor" href="#\u9012\u63A8\u6C42\u89E3" aria-hidden="true">#</a></h3><p>\u9012\u63A8\u516C\u5F0F\uFF1A$C_n^m = C_{n-1}^m + C_{n-1}^{m-1}$</p><blockquote><p>\u8BC1\u660E\u53EF\u4ECE\u4E24\u4E2A\u89D2\u5EA6\uFF1A</p><ol><li>\u6768\u8F89\u4E09\u89D2\u67D0\u6570\u7B49\u4E8E\u5176\u9876\u90E8\u5DE6\u53F3\u4E24\u6570\u4E4B\u548C</li><li>\u96C6\u5408\u610F\u4E49\u4E0A\u4ECEn\u4E2A\u4E1C\u897F\u4E2D\u9009\u53D6m\u4E2A\u7684\u6240\u6709\u60C5\u51B5\u6570\u7B49\u4E8E <ul><li>\u7B2Cn\u4E2A\u6570\u4E0D\u9009\u53D6\uFF0C\u4ECE\u524Dn - 1\u4E2D\u9009m\u4E2A\u6570</li><li>\u7B2Cn\u4E2A\u6570\u9009\u53D6\uFF0C\u4ECE\u524Dn - 1\u4E2D\u9009\u53D6m - 1\u4E2A\u6570</li></ul></li></ol></blockquote><p>\u590D\u6742\u5EA6\uFF1A</p><ul><li>\u65F6\u95F4\uFF1A$O(n^2)$</li><li>\u7A7A\u95F4\uFF1A$O(n^2)$</li></ul><p>\u7279\u70B9\uFF1A</p><ul><li>\u80FD\u7B80\u5355\u6C42\u89E3\u591A\u7684\u7EC4\u5408\u6570</li></ul><p>\u5728$1 \\leq n \\leq 10^5, 1 \\leq b \\leq a \\leq 2000$\u7684\u8303\u56F4\u5185\u53EF\u6C42\u89E3</p><div class="language-cpp"><pre><code>include <span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2010</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span>
            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u9884\u5904\u7406\u6C42\u89E3" tabindex="-1">\u9884\u5904\u7406\u6C42\u89E3 <a class="header-anchor" href="#\u9884\u5904\u7406\u6C42\u89E3" aria-hidden="true">#</a></h3><p>\u4F7F\u7528\u516C\u5F0F\u6C42\u89E3$C_n^m = \\frac {n! }{m!(n - m)! }$<br> \u53EF\u4EE5\u5148\u9884\u5904\u7406\u51FAfact(n) , infact(m) , infact(n - m)\uFF0Cinfact(x)\u8868\u793Ax!\u7684\u9006\u5143<br> \u5219$C_n^m = fact(n) * infact(m) * infact( n - m ) $ <br></p><blockquote><p>\u4E00\u822C\u9898\u76EEmod = 1e9 + 7 \u4E3A\u8D28\u6570\uFF0C\u4E142~1e9+6\u90FD\u4E0E1e9+7\u4E92\u8D28\uFF0C\u6240\u4EE5\u53EF\u4EE5\u4F7F\u7528\u8D39\u9A6C\u5C0F\u5B9A\u7406\u3001\u5FEB\u901F\u5E42\u6765\u6C42\u9006\u5143\uFF0C\u5F53\u7136\u4E5F\u53EF\u4EE5\u4F7F\u7528\u6269\u5C55\u6B27\u51E0\u91CC\u5F97\u6765\u6C42\u3002</p></blockquote><p>\u590D\u6742\u5EA6\uFF1A</p><ul><li>\u65F6\u95F4\uFF1A$O(nlogn)$</li></ul><p>\u5728$1 \\leq n \\leq 10^4, 1 \\leq b \\leq a \\leq 10^5$\u7684\u8303\u56F4\u5185\u53EF\u6C42\u89E3</p><div class="language-cpp"><pre><code>include <span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">using</span> LL <span class="token operator">=</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fact<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> infact<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>

LL <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    LL res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        a <span class="token operator">=</span> <span class="token number">1LL</span> <span class="token operator">*</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    fact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> infact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1LL</span> <span class="token operator">*</span> fact<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        infact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1LL</span> <span class="token operator">*</span> infact<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">qmi</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">1LL</span> <span class="token operator">*</span> fact<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">*</span> infact<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token punctuation">)</span> <span class="token operator">*</span> infact<span class="token punctuation">[</span>a <span class="token operator">-</span> b<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//\u6A21\u4E24\u6B21\u662F\u9632\u6B62\u6570\u636E\u66B4long long </span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u4F18\u5316</p><p>\u6C42\u9636\u4E58\u7684\u9006\u5143\u4F7F\u7528\u8D39\u9A6C\u5C0F\u5B9A\u7406\u6216\u6269\u5C55\u6B27\u51E0\u91CC\u5F97\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u90FD\u4E3A$O(nlogn)$\u3002\u4E8B\u5B9E\u4E0A\uFF0C\u53EF\u4EE5\u5148\u6C42\u51FA\u6700\u540E\u4E00\u4E2A\u9636\u4E58\u7684\u9006\u5143\uFF0C\u518D\u6839\u636E$infact(n - 1) = infact(n) * n$\u7EBF\u6027\u9012\u63A8\u51FA\u6240\u6709\u9636\u4E58\u7684\u9006\u5143\uFF0C\u4F7F\u5F97\u9884\u5904\u7406\u65F6\u95F4\u590D\u6742\u5EA6\u8FD1\u4F3C\u4E8E$O(n)$</p><div class="language-cpp"><pre><code>include <span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">using</span> LL <span class="token operator">=</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fact<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> infact<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>

LL <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    LL res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        a <span class="token operator">=</span> <span class="token number">1LL</span> <span class="token operator">*</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    fact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> infact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1LL</span> <span class="token operator">*</span> fact<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    
    infact<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">qmi</span><span class="token punctuation">(</span>fact<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>
        infact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1LL</span> <span class="token operator">*</span> infact<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">1LL</span> <span class="token operator">*</span> fact<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">*</span> infact<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token punctuation">)</span> <span class="token operator">*</span> infact<span class="token punctuation">[</span>a <span class="token operator">-</span> b<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u5362\u5361\u65AF\u5B9A\u7406\u6C42\u89E3" tabindex="-1">\u5362\u5361\u65AF\u5B9A\u7406\u6C42\u89E3 <a class="header-anchor" href="#\u5362\u5361\u65AF\u5B9A\u7406\u6C42\u89E3" aria-hidden="true">#</a></h3><p>\u5B9A\u7406\uFF1A$C^b_a \\equiv C_{a%p}^{b%p} * C_{a/p}^{b/p}(mod \\space p)$</p><p>\u8BC1\u660E\uFF1A</p><p>\u590D\u6742\u5EA6\uFF1A</p><ul><li>\u65F6\u95F4\uFF1A$O(log_pN * plogp)$</li></ul><p>\u9002\u7528\u4E8Ea\uFF0Cb\u8303\u56F4\u5927\u6837\u7684\u60C5\u51B5\u6C42\u89E3\uFF0C\u8FD9\u9898\u4FDD\u8BC1p\u4E3A\u8D28\u6570\u56E0\u6B64\u53EF\u4EE5\u7528\u8D39\u9A6C\u5C0F\u5B9A\u7406\u6C42\u9006\u5143<br> \u5728$1 \\leq n \\leq 20\uFF0C1 \\leq b \\leq a \\leq 10^{18}\uFF0C1 \\leq p \\leq 10^5$\u7684\u8303\u56F4\u5185\u53EF\u6C42\u89E3</p><blockquote><p>\u5176\u5B9E\u662F\u628A10^18\u7684a, b\u8F6C\u6362\u6210\u5C0F\u4E8Ep\u7684\u6570(10^5)\u6C42\u89E3\uFF0C\u56E0\u6B64a % p\uFF0Cb % p \u5C0F\u4E8Ep\uFF0C\u4F46\u662F a / p\uFF0Cb / p\u6709\u53EF\u80FD\u4ECD\u7136\u5927\u4E8Ep\uFF0C\u56E0\u6B64\u7EE7\u7EED\u7528lucas\u5316\u5C0F</p></blockquote><div class="language-cpp"><pre><code>include <span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        a <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">,</span> i <span class="token operator">--</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> i <span class="token operator">%</span> p<span class="token punctuation">,</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> <span class="token function">qmi</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>  <span class="token comment">//\u8981\u4E58\u4E0A\u9006\u5143\uFF0C\u5426\u5219\u4F1A\u51FA\u73B0\u9664j\u4E3A0\u7684\u60C5\u51B5</span>
    
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">lucas</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span> LL b<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> p <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">C</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token function">C</span><span class="token punctuation">(</span>a <span class="token operator">%</span> p<span class="token punctuation">,</span> b <span class="token operator">%</span> p<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">lucas</span><span class="token punctuation">(</span>a <span class="token operator">/</span> p<span class="token punctuation">,</span> b <span class="token operator">/</span> p<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        LL a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        <span class="token keyword">int</span> p<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">lucas</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u6768\u8F89\u4E09\u89D2" tabindex="-1">\u6768\u8F89\u4E09\u89D2 <a class="header-anchor" href="#\u6768\u8F89\u4E09\u89D2" aria-hidden="true">#</a></h2><p>\u6027\u8D28\uFF1A</p><ul><li>\u6768\u8F89\u4E09\u89D2\u4E0A\u4EFB\u610F\u4E00\u4E2A\u6570\u90FD\u53EF\u4EE5\u7528\u7EC4\u5408\u6570\u8868\u793A</li><li>\u6768\u8F89\u4E09\u89D2\u4E0A\u9664\u4E86\u5916\u56F4\u7684\u6570\uFF0C\u4EFB\u610F\u4E00\u4E2A\u6570\u7B49\u4E8E\u5B83\u4E0A\u65B9\u5DE6\u53F3\u4E24\u6570\u4E4B\u548C</li><li>\u6768\u8F89\u4E09\u89D2\u662F\u5BF9\u79F0\u7684\uFF0C\u4E14\u534A\u8FB9\u6768\u8F89\u4E09\u89D2\u7684\u659C\u7EBF\u6709\u9012\u589E\u7684\u6027\u8D28\uFF0C\u8D8A\u9760\u8FD1\u5E95\uFF0C\u8D8A\u9760\u8FD1\u4E2D\u95F4\u7684\u7684\u6570\u8D8A\u5927</li><li>\u6768\u8F89\u4E09\u89D2\u6B63\u4E2D\u95F4\u7684\u6570\u4E3A$C_{2k}^k$</li><li>\u6768\u8F89\u4E09\u89D2\u4E0A\u4EFB\u610F\u4E00\u4E2A\u6570\u7684\u5E8F\u53F7\uFF0C\u53EF\u4EE5\u7531\u5B83\u7684\u7EC4\u5408\u6570\u5F97\u5230\uFF0C\u82E5\u8BE5\u6570\u4E3A$C_a^b$\uFF0C\u5219\u8BE5\u6570\u7684\u5E8F\u53F7\u4E3A<code>(a + 1) * a + b + 1</code>(\u4ECE1\u5F00\u59CB)</li></ul><p>\u4E8C\u5206\u6C42\u6768\u8F89\u4E09\u89D2\u5E8F\u53F7</p><div class="language-cpp"><pre><code>include <span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>

LL <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    LL res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b <span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">,</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res <span class="token operator">=</span> res <span class="token operator">*</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    LL l <span class="token operator">=</span> k <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token number">1LL</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token comment">//\u540C\u4E00\u6761\u659C\u7EBF\u4E0A\u53EA\u6709C\u7684\u5E95\u6570\u5728\u53D8</span>
        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    
    cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">16</span> <span class="token punctuation">;</span> <span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u6392\u5217\u6570" tabindex="-1">\u6392\u5217\u6570 <a class="header-anchor" href="#\u6392\u5217\u6570" aria-hidden="true">#</a></h2><p>\u5355\u7EAF\u8BA1\u7B97\u6392\u5217\u6570\u7684\u9898\u76EE\u8F83\u5C11\uFF0C\u8BA1\u7B97\u7684\u65B9\u6CD5\u53EF\u4EE5\u53C2\u8003\u7EC4\u5408\u6570<br></p><p>\u6392\u5217\u6570\u516C\u5F0F\uFF1A$A_a^b = \\frac{a!}{ ( a - b )! }$</p><blockquote><p>\u56E0\u4E3A\u89C4\u5B9A0! = 1\uFF0C\u5219A(0, 0) = 1</p></blockquote><ol><li>\u76F4\u63A5\u6C42\u89E3</li><li>\u9AD8\u7CBE\u5EA6\u76F4\u63A5\u6C42\u89E3</li><li>\u9884\u5904\u7406\u6C42\u89E3</li></ol><h2 id="\u9519\u6392\u516C\u5F0F" tabindex="-1">\u9519\u6392\u516C\u5F0F <a class="header-anchor" href="#\u9519\u6392\u516C\u5F0F" aria-hidden="true">#</a></h2><p>\u9519\u6392\u95EE\u9898\u662F\u7EC4\u5408\u6570\u5B66\u4E2D\u7684\u95EE\u9898\u4E4B\u4E00\u3002\u8003\u8651\u4E00\u4E2A\u6709<code>n</code>\u4E2A\u5143\u7D20\u7684\u6392\u5217\uFF0C<strong>\u82E5\u4E00\u4E2A\u6392\u5217\u4E2D\u6240\u6709\u7684\u5143\u7D20\u90FD\u4E0D\u5728\u81EA\u5DF1\u539F\u6765\u7684\u4F4D\u7F6E\u4E0A</strong>\uFF0C\u90A3\u4E48\u8FD9\u6837\u7684\u6392\u5217\u5C31\u79F0\u4E3A\u539F\u6392\u5217\u7684\u4E00\u4E2A\u9519\u6392\u3002<code>n</code>\u4E2A\u5143\u7D20\u7684\u9519\u6392\u6570\u8BB0\u4E3A$D_n$\u6216$!n$\u3002 \u7814\u7A76\u4E00\u4E2A\u6392\u5217\u9519\u6392\u4E2A\u6570\u7684\u95EE\u9898\uFF0C\u53EB\u505A<strong>\u9519\u6392\u95EE\u9898</strong>\u6216\u79F0\u4E3A<strong>\u66F4\u5217\u95EE\u9898</strong></p><h4 id="\u9012\u63A8\u6C42\u89E3-1" tabindex="-1">\u9012\u63A8\u6C42\u89E3 <a class="header-anchor" href="#\u9012\u63A8\u6C42\u89E3-1" aria-hidden="true">#</a></h4><ul><li>\u9012\u63A8\u516C\u5F0F\uFF1A $D_n = (n - 1)(D_{n - 1} + D_{n - 2} )$<br> \u8868\u793A\u5C06n\u4E2A\u4E1C\u897F\u8FDB\u884C\u9519\u6392\u7684\u65B9\u6848\u6570</li></ul><blockquote><p>\u5047\u8BBE\u6709 n \u4E2A\u6570\u9519\u6392\uFF0C\u5148\u628A\u7B2Cn\u4E2A\u6570\u653E\u5230\u7B2Ck\u4E2A\u6570\u7684\u4F4D\u7F6E\uFF0Ck\u7684\u53EF\u53D6n - 1\u4E2A($1 \\leq k \\leq n - 1$)\uFF0C\u8FD9\u6837\u5B8C\u6210\u7B2C\u4E00\u4E2A\u6570\u7684\u9519\u4F4D<br> \u63A5\u7740\u5206\u4E3A\u4E24\u79CD\u60C5\u51B5\uFF1A</p><ol><li>\u7B2C k \u4E2A\u6570\u653E\u5728\u7A7A\u51FA\u6765\u7684\u7B2Cn\u4F4D\u7F6E\uFF0C\u8FD9\u65F6\u8FD8\u5269\u4F59n - 2\u4E2A\u6570\u8FDB\u884C\u9519\u6392\uFF0C\u5373$D_{n - 2}$</li><li>\u7B2C k \u4E2A\u6570\u4E0D\u653E\u5728\u7B2Cn\u4F4D\u7F6E\uFF0C\u6B64\u65F6\u76F8\u5F53\u7B2Cn\u4E2A\u4F4D\u7F6E\u4E3Ak\u7684\u539F\u672C\u4F4D\u7F6E\uFF0C\u5219\u5305\u542Bk\u5728\u5185\u7684n - 1\u4E2A\u6570\u8FDB\u884C\u9519\u6392\uFF0C\u5373$D_{n - 1}$<br></li></ol><p>\u53EF\u5F97\uFF1A$D_n = (n - 1)(D_{n - 1} + D_{n - 2})$</p></blockquote><blockquote><p>\u7279\u522B\u5730\uFF0C\u7531\u516C\u5F0F\u7684\u5B9A\u4E49\u53EF\u77E5\u9053$D_1=0, D_2 = 1$</p></blockquote><h4 id="\u516C\u5F0F\u5316\u7B80" tabindex="-1">\u516C\u5F0F\u5316\u7B80 <a class="header-anchor" href="#\u516C\u5F0F\u5316\u7B80" aria-hidden="true">#</a></h4><p>\u63A8\u5BFC\u53CA\u5316\u7B80\u8FC7\u7A0B\uFF1A<a href="https://zh.wikipedia.org/wiki/%E9%94%99%E6%8E%92%E9%97%AE%E9%A2%98#%E7%AE%80%E5%8C%96%E5%85%AC%E5%BC%8F" target="_blank" rel="noopener noreferrer">\u70B9\u51FB\u8DF3\u8F6C</a></p><p>\u516C\u5F0F\uFF1A$D_n = n!(\\frac{1}{2!} - \\frac{1}{3!} + ... + (-1)^n\\frac{1}{n!})$</p><p>\u5316\u7B80\uFF1A$D_n = \\left\\lfloor \\frac{n!}{e} + 0.5 \\right\\rfloor$</p><h2 id="\u5361\u5854\u5170\u6570" tabindex="-1">\u5361\u5854\u5170\u6570 <a class="header-anchor" href="#\u5361\u5854\u5170\u6570" aria-hidden="true">#</a></h2><p>\u5361\u5854\u5170\u6570\u662F<strong>\u7EC4\u5408\u6570\u5B66</strong>\u4E2D\u4E00\u4E2A\u5E38\u5728\u5404\u79CD<strong>\u8BA1\u6570\u95EE\u9898</strong>\u4E2D\u51FA\u73B0\u7684<strong>\u6570\u5217</strong>\u3002\u4EE5\u6BD4\u5229\u65F6\u7684\u6570\u5B66\u5BB6\u6B27\u4EC1\xB7\u67E5\u7406\xB7\u5361\u7279\u5170\uFF081814\u20131894\uFF09\u547D\u540D\u3002\u5386\u53F2\u4E0A\uFF0C\u6E05\u671D\u6570\u5B66\u5BB6\u660E\u5B89\u56FE\uFF081692\u5E74\uFF0D1763\u5E74\uFF09\u5728\u5176\u300A\u5272\u571C\u5BC6\u7387\u6377\u6CD5\u300B\u4E2D\u6700\u5148\u53D1\u660E\u8FD9\u79CD\u8BA1\u6570\u65B9\u5F0F\uFF0C\u8FDC\u8FDC\u65E9\u4E8E\u5361\u5854\u5170\u3002\u6709\u4E2D\u56FD\u5B66\u8005\u5EFA\u8BAE\u5C06\u6B64\u6570\u547D\u540D\u4E3A\u201C\u660E\u5B89\u56FE\u6570\u201D\u6216\u201C\u660E\u5B89\u56FE-\u5361\u5854\u5170\u6570\u201D\u3002</p><p>\u5361\u5854\u5170\u6570\u7684\u4E00\u822C\u9879\u516C\u5F0F\u4E3A\uFF1A$C_n = \\frac{(2n)!}{(n + 1)!n!}$</p><p>\u9012\u63A8\u5173\u7CFB\u516C\u5F0F\uFF1A$C_{n+1} = C_0C_n + C_1C_{n-1} + ... + C_nC_0$</p><blockquote><p>\u7279\u522B\u7684 $C_0 = 1$</p></blockquote><h4 id="\u5E94\u7528" tabindex="-1">\u5E94\u7528 <a class="header-anchor" href="#\u5E94\u7528" aria-hidden="true">#</a></h4><p>\u7EC4\u5408\u6570\u5B66\u4E2D\u6709\u975E\u5E38\u591A\u7684\u7EC4\u5408\u7ED3\u6784\u53EF\u4EE5\u7528\u5361\u5854\u5170\u6570\u6765\u8BA1\u6570\u3002\u4EE5\u4E0B\u7528n=3\u548Cn=4\u4E3E\u82E5\u5E72\u4F8B\uFF1A</p><ul><li>$C_n$\u8868\u793A\u957F\u5EA62n\u7684<code>dyck word</code>\u7684\u4E2A\u6570\u3002Dyck\u8BCD\u662F\u4E00\u4E2A\u6709n\u4E2AX\u548Cn\u4E2AY\u7EC4\u6210\u7684\u5B57\u4E32\uFF0C\u4E14\u6240\u6709\u7684\u524D\u7F00\u5B57\u7B26\u4E32\u7686\u6EE1\u8DB3X\u7684\u4E2A\u6570\u5927\u4E8E\u7B49\u4E8EY\u7684\u4E2A\u6570\u3002\u4EE5\u4E0B\u4E3A\u957F\u5EA6\u4E3A6\u7684dyck</li></ul><p>words\uFF1A $$XXXYYY\\space XYXXYY\\space XYXYXY\\space XXYYXY\\space XXYXYY$$</p><ul><li>\u5C06\u4E0A\u4F8B\u7684X\u6362\u6210\u5DE6\u62EC\u53F7\uFF0CY\u6362\u6210\u53F3\u62EC\u53F7\uFF0C$C_n$\u8868\u793A\u6240\u6709\u5305\u542Bn\u7EC4\u62EC\u53F7\u7684\u5408\u6CD5\u8FD0\u7B97\u5F0F\u7684\u4E2A\u6570\uFF1A</li></ul><p>$$((()))\\space ()(())\\space ()()()\\space (())()\\space (()())$$</p><ul><li>$C_n$\u8868\u793A\u6709<em>n</em>\u4E2A\u8282\u70B9\u7EC4\u6210\u4E0D\u540C\u4E8C\u53C9\u6570\u7684\u65B9\u6848\u6570\u3002</li></ul><h2 id="\u7EC4\u5408\u8BB0\u6570" tabindex="-1">\u7EC4\u5408\u8BB0\u6570 <a class="header-anchor" href="#\u7EC4\u5408\u8BB0\u6570" aria-hidden="true">#</a></h2><p>\u7EC4\u5408\u8BA1\u6570\u7406\u8BBA\u662F\u7EC4\u5408\u6570\u5B66\u4E2D\u4E00\u4E2A\u6700\u57FA\u672C\u7684\u7814\u7A76\u65B9\u5411\uFF0C\u4E3B\u8981\u7814\u7A76\u6EE1\u8DB3\u4E00\u5B9A\u6761\u4EF6\u7684\u5B89\u6392\u65B9\u5F0F\u7684\u6570\u76EE\u53CA\u5176\u8BA1\u6570\u95EE\u9898\u3002\u672C\u8BFE\u7A0B\u4E3B\u8981\u4ECB\u7ECD\u7EC4\u5408\u6570\u5B66\u4E2D\u5E38\u89C1\u7684\u548C\u91CD\u8981\u7684\u4E00\u4E9B\u8BA1\u6570\u539F\u7406\u3001\u8BA1\u6570\u65B9\u6CD5\u548C\u8BA1\u6570\u516C\u5F0F\uFF0C\u5305\u62EC\u4E00\u822C\u7684\u6392\u5217\u3001\u7EC4\u5408\u7684\u8BA1\u7B97\u4EE5\u53CA\u751F\u6210\u51FD\u6570\u3001\u5BB9\u65A5\u539F\u7406\u3001\u53CD\u6F14\u539F\u7406\u3001Polya \u8BA1\u6570\u5B9A\u7406\u7B49\u7B49\uFF0C\u662F\u7814\u7A76\u7EC4\u5408\u6570\u5B66\u7684\u521D\u6B65\u3002</p><h2 id="\u9012\u63A8" tabindex="-1">\u9012\u63A8 <a class="header-anchor" href="#\u9012\u63A8" aria-hidden="true">#</a></h2><p>\u9012\u63A8\u5173\u7CFB\uFF08\u82F1\u8BED\uFF1ARecurrence relation\uFF09\uFF0C\u5728\u6570\u5B66\u4E0A\u4E5F\u5C31\u662F\u5DEE\u5206\u65B9\u7A0B\uFF08Difference equation\uFF09\uFF0C\u662F\u4E00\u79CD\u9012\u63A8\u5730\u5B9A\u4E49\u4E00\u4E2A\u5E8F\u5217\u7684\u65B9\u7A0B\uFF1A\u5E8F\u5217\u7684\u6BCF\u4E00\u9879\u76EE\u662F\u5B9A\u4E49\u4E3A\u524D\u82E5\u5E72\u9879\u7684\u51FD\u6570\u3002</p><p>\u50CF\u6590\u6CE2\u90A3\u5951\u6570\u5373\u4E3A\u9012\u63A8\u5173\u7CFB</p><p>$x_{n+2}=x_{n+1}+x_{n}$</p><p>\u67D0\u4E9B\u7B80\u5355\u5B9A\u4E49\u7684\u9012\u63A8\u5173\u7CFB\u5F0F\u53EF\u80FD\u4F1A\u8868\u73B0\u51FA\u975E\u5E38\u590D\u6742\u7684\uFF08\u6DF7\u6C8C\u7684\uFF09\u6027\u8D28\uFF0C\u4ED6\u4EEC\u5C5E\u4E8E\u6570\u5B66\u4E2D\u7684\u975E\u7EBF\u6027\u5206\u6790\u9886\u57DF\u3002</p><p>\u6240\u8C13\u89E3\u4E00\u4E2A\u9012\u63A8\u5173\u7CFB\u5F0F\uFF0C\u4E5F\u5C31\u662F\u6C42\u5176\u89E3\u6790\u89E3\uFF0C\u5373\u5173\u4E8En\u7684\u975E\u9012\u5F52\u51FD\u6570\u3002</p><h3 id="\u5E38\u89C1\u7684\u9012\u63A8" tabindex="-1">\u5E38\u89C1\u7684\u9012\u63A8 <a class="header-anchor" href="#\u5E38\u89C1\u7684\u9012\u63A8" aria-hidden="true">#</a></h3><ul><li>\u7B49\u5DEE\u6570\u5217 <blockquote><p>$a_{n+1}=a_n + k$</p></blockquote></li><li>\u7B49\u6BD4\u6570\u5217 <blockquote><p>$a_{n+1}=ka_{n}$<br></p></blockquote></li><li>\u9636\u4E58 <blockquote><p>$n! = (n-1)!$<br> \u7279\u522B\u7684 $0! = 1$</p></blockquote></li><li>\u5012\u6570\u548C <blockquote><p>$\u8BBEx_k = x^k + x^{-k}$\uFF0C\u5219<br> $x_1 = x_1$<br> $x_2 = ( x_1 )^2 - 2$<br> $x_3 = x_1 * x_2 - x_1$<br> $x_4 = ( x_2 )^2 - 2$<br> \u2026\u2026<br> $x_{2k} = (x_k)^2 - 2$<br> $x_{2k+1} = x_k * x_{k+1} - x_1$<br></p></blockquote></li><li>\u6590\u6CE2\u90A3\u5951\u6570 <blockquote><p>$F_0 = 0$<br> $F_1 = 1$<br> $F_n = F_{n-1} + F_{n-2}$<br></p></blockquote></li><li>\u89E3\u7EBF\u6027\u9012\u63A8</li><li>\u5E38\u7CFB\u6570\u7EBF\u6027\u9F50\u6B21\u9012\u63A8</li></ul><h2 id="\u9E3D\u527F\u539F\u7406" tabindex="-1">\u9E3D\u527F\u539F\u7406 <a class="header-anchor" href="#\u9E3D\u527F\u539F\u7406" aria-hidden="true">#</a></h2><p>\u9E3D\u5DE2\u539F\u7406\uFF0C\u53C8\u540D\u72C4\u5229\u514B\u96F7\u62BD\u5C49\u539F\u7406\u3001\u9E3D\u7B3C\u539F\u7406\u3002</p><p>\u5176\u4E2D\u4E00\u79CD\u7B80\u5355\u7684\u8868\u8FF0\u6CD5\u4E3A\uFF1A</p><p>\u82E5\u6709n\u4E2A\u7B3C\u5B50\u548Cn+1\u53EA\u9E3D\u5B50\uFF0C\u6240\u6709\u7684\u9E3D\u5B50\u90FD\u88AB\u5173\u5728\u9E3D\u7B3C\u91CC\uFF0C\u90A3\u4E48\u81F3\u5C11\u6709\u4E00\u4E2A\u7B3C\u5B50\u6709\u81F3\u5C112\u53EA\u9E3D\u5B50\u3002</p><p>\u53E6\u4E00\u79CD\u4E3A\uFF1A</p><p>\u82E5\u6709n\u4E2A\u7B3C\u5B50\u548Ckn+1\u53EA\u9E3D\u5B50\uFF0C\u6240\u6709\u7684\u9E3D\u5B50\u90FD\u88AB\u5173\u5728\u9E3D\u7B3C\u91CC\uFF0C\u90A3\u4E48\u81F3\u5C11\u6709\u4E00\u4E2A\u7B3C\u5B50\u6709\u81F3\u5C11k+1\u53EA\u9E3D\u5B50\u3002</p><p>\u96C6\u5408\u8BBA\u7684\u8868\u8FF0\u5982\u4E0B\uFF1A</p><p>\u82E5A\u662Fn+1\u5143\u96C6\uFF0CB\u662Fn\u5143\u96C6\uFF0C\u5219\u4E0D\u5B58\u5728\u4ECEA\u5230B\u7684\u5355\u5C04\u3002 \u62C9\u59C6\u9F50\u5B9A\u7406\u662F\u6B64\u539F\u7406\u7684\u63A8\u5E7F\u3002</p><h3 id="\u63A8\u5E7F" tabindex="-1">\u63A8\u5E7F <a class="header-anchor" href="#\u63A8\u5E7F" aria-hidden="true">#</a></h3><p>\u4E00\u79CD\u8868\u8FBE\u662F\u8FD9\u6837\u7684\uFF1A\u5982\u679C\u8981\u628An\u4E2A\u5BF9\u8C61\u5206\u914D\u5230m\u4E2A\u5BB9\u5668\u4E2D\uFF0C\u5FC5\u6709\u81F3\u5C11\u4E00\u4E2A\u5BB9\u5668\u5BB9\u7EB3\u81F3\u5C11$\\displaystyle \\left\\lceil { \\frac {n}{m} }\\right\\rceil$\u4E2A\u5BF9\u8C61\u3002</p><blockquote><p>\u9E3D\u5DE2\u539F\u7406\u7ECF\u5E38\u5728\u8BA1\u7B97\u673A\u9886\u57DF\u5F97\u5230\u771F\u6B63\u7684\u5E94\u7528\u3002\u6BD4\u5982\uFF1A\u54C8\u5E0C\u8868\u7684\u91CD\u590D\u95EE\u9898\uFF08\u51B2\u7A81\uFF09\u662F\u4E0D\u53EF\u907F\u514D\u7684\uFF0C\u56E0\u4E3AKeys\u7684\u6570\u76EE\u603B\u662F\u6BD4Indices\u7684\u6570\u76EE\u591A\uFF0C\u4E0D\u7BA1\u662F\u591A\u4E48\u9AD8\u660E\u7684\u7B97\u6CD5\u90FD\u4E0D\u53EF\u80FD\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\u3002\u8FD9\u4E2A\u539F\u7406\uFF0C\u8FD8\u8BC1\u660E\u4EFB\u4F55\u65E0\u635F\u538B\u7F29\u7B97\u6CD5\uFF0C\u5728\u628A\u4E00\u4E9B\u8F93\u5165\u53D8\u5C0F\u7684\u540C\u65F6\uFF0C\u4F5C\u4E3A\u4EE3\u4EF7\u4E00\u5B9A\u6709\u5176\u4ED6\u7684\u8F93\u5165\u589E\u5927\uFF0C\u5426\u5219\u5BF9\u4E8E\u957F\u5EA6\u4E3AL\u7684\u8F93\u5165\u96C6\u5408\uFF0C\u8BE5\u538B\u7F29\u7B97\u6CD5\u603B\u80FD\u5C06\u5176\u6620\u5C04\u5230\u4E00\u4E2A\u66F4\u5C0F\u7684\u957F\u5EA6\u5C0F\u4E8EL\u7684\u8F93\u51FA\u96C6\u5408\uFF0C\u800C\u8FD9\u4E0E\u9E3D\u5DE2\u7406\u8BBA\u76F8\u6096\u3002</p></blockquote><h2 id="\u5BB9\u65A5\u539F\u7406" tabindex="-1">\u5BB9\u65A5\u539F\u7406 <a class="header-anchor" href="#\u5BB9\u65A5\u539F\u7406" aria-hidden="true">#</a></h2><p>\u5728\u8BA1\u6570\u65F6\uFF0C\u5FC5\u987B\u6CE8\u610F\u6CA1\u6709\u91CD\u590D\uFF0C\u6CA1\u6709\u9057\u6F0F\u3002\u4E3A\u4E86<strong>\u4F7F\u91CD\u53E0\u90E8\u5206\u4E0D\u88AB\u91CD\u590D\u8BA1\u7B97</strong>\uFF0C\u4EBA\u4EEC\u7814\u7A76\u51FA\u4E00\u79CD\u65B0\u7684\u8BA1\u6570\u65B9\u6CD5\uFF0C\u8FD9\u79CD\u65B9\u6CD5\u7684\u57FA\u672C\u601D\u60F3\u662F\uFF1A\u5148\u4E0D\u8003\u8651\u91CD\u53E0\u7684\u60C5\u51B5\uFF0C\u628A\u5305\u542B\u4E8E\u67D0\u5185\u5BB9\u4E2D\u7684\u6240\u6709\u5BF9\u8C61\u7684\u6570\u76EE\u5148\u8BA1\u7B97\u51FA\u6765\uFF0C\u7136\u540E\u518D\u628A\u8BA1\u6570\u65F6\u91CD\u590D\u8BA1\u7B97\u7684\u6570\u76EE\u6392\u65A5\u51FA\u53BB\uFF0C\u4F7F\u5F97\u8BA1\u7B97\u7684\u7ED3\u679C\u65E2\u65E0\u9057\u6F0F\u53C8\u65E0\u91CD\u590D\uFF0C\u8FD9\u79CD\u8BA1\u6570\u7684\u65B9\u6CD5\u79F0\u4E3A\u5BB9\u65A5\u539F\u7406\u3002</p><p>\u96C6\u5408\u516C\u5F0F\uFF1A$|A \\cup B \\cup C| = |A| + |B| + |C| - |A \\cap B| - |B \\cap C| - |A \\cap C| + |A \\cap B \\cap C|$</p><p>\u4F8B\u9898\uFF1A \u5206\u6BCD\u662F1001\u7684\u6700\u7B80\u5206\u6570\u4E00\u5171\u6709\u591A\u5C11\u4E2A\uFF1F<br> \u5206\u6790\uFF1A\u8FD9\u4E00\u9898\u5B9E\u9645\u4E0A\u5C31\u662F\u627E\u5206\u5B50\u4E2D\u4E0D\u80FD\u4E0E1001\u8FDB\u884C\u7EA6\u5206\u7684\u6570\u3002\u7531\u4E8E1001=7\xD711\xD713\uFF0C\u6240\u4EE5\u5C31\u662F\u627E\u4E0D\u80FD\u88AB7\uFF0C11\uFF0C13\u6574\u9664\u7684\u6570\u3002<br></p><p>\u89E3\u7B54\uFF1A</p><ol><li><code>1001 / 7 = 143; 1001 / 11 = 91; 1001 / 13 = 77;</code> <br></li><li><code>1001 / (7 * 11) = 13; 1001 / (7 * 13) = 11; 1001 / (11 * 13) = 7</code></li><li><code>1001 / (7 * 11 * 13) = 1</code></li></ol><p>\u5219\u80FD\u88AB7\uFF0C11\uFF0C13\u6574\u9664\u7684\u6570\u5171\u6709(143 + 91 + 77) - (13 + 11 + 7) + 1 = 281 \u4E2A</p><p>\u4E0D\u80FD\u88AB\u5176\u6574\u9664\u7684\u6570\u5171\u67091001 - 281 = 721 \u4E2A</p>`,105),e=[o];function c(l,u,k,r,i,d){return a(),s("div",null,e)}var w=n(t,[["render",c]]);export{m as __pageData,w as default};
